use std::collections::HashMap;
use std::sync::OnceLock;

pub fn get_symbol_map() -> &'static HashMap<&'static str, &'static str> {
    static SYMBOL_MAP: OnceLock<HashMap<&str, &str>> = OnceLock::new();
    SYMBOL_MAP.get_or_init(|| {
        let mut symbol_map = HashMap::new();
        symbol_map.insert(r"nonumber", r"");
        symbol_map.insert(r"vec", r"arrow");
        symbol_map.insert(r"overrightarrow", r"arrow");
        symbol_map.insert(r"dot", r"dot");
        symbol_map.insert(r"ddot", r"dot.double");
        symbol_map.insert(r"doteq", r"dot(eq)");
        symbol_map.insert(r"dots", r"dots.h");
        symbol_map.insert(r"widehat", r"hat"); // Ideally, the result of \widehat should be longer than \hat. But it is not implemented now.
        symbol_map.insert(r"widetilde", r"tilde"); // Ideally, the result of \widetilde should be longer than \tilde. But it is not implemented now.
        symbol_map.insert(r"quad", r"quad");
        symbol_map.insert(r"qquad", r"wide");
        symbol_map.insert(r"overbrace", r"overbrace");
        symbol_map.insert(r"overline", r"overline");
        symbol_map.insert(r"underline", r"underline");
        symbol_map.insert(r"bar", r"macron");
        symbol_map.insert(r"dbinom", r"binom");
        symbol_map.insert(r"tbinom", r"binom");
        symbol_map.insert(r"dfrac", r"frac");
        symbol_map.insert(r"tfrac", r"frac");

        symbol_map.insert(r"operatorname", r"op");

        symbol_map.insert(r"boldsymbol", r"bold");
        symbol_map.insert(r"mathbb", r"bb");
        symbol_map.insert(r"mathbf", r"bold");
        symbol_map.insert(r"mathcal", r"cal");
        symbol_map.insert(r"mathit", r"italic");
        symbol_map.insert(r"mathfrak", r"frak");
        symbol_map.insert(r"mathrm", r"upright");
        symbol_map.insert(r"mathsf", r"sans");
        symbol_map.insert(r"mathtt", r"mono");

        symbol_map.insert(r"rm", r"upright");

        // TODO: \pmb need special logic to handle but it is not implemented now.
        symbol_map.insert(r"pmb", r"bold");

        /* variants of plus,minus,times,divide */

        /* wave */
        // tex: \sim \approx \cong \simeq \asymp \equiv \propto
        // typst: tilde.op approx tilde.equiv tilde.eq ≍ equiv prop
        symbol_map.insert(r"asymp", r"≍"); // just use the Unicode character :-)

        /* arrows */
        symbol_map.insert(r"gets", r"arrow.l");
        symbol_map.insert(r"iff", r"arrow.l.r.double.long");
        symbol_map.insert(r"implies", r"arrow.r.double.long");

        symbol_map.insert(r"Delta", r"Delta");
        symbol_map.insert(r"Gamma", r"Gamma");
        symbol_map.insert(r"Lambda", r"Lambda");
        symbol_map.insert(r"Omega", r"Omega");
        symbol_map.insert(r"P", r"pilcrow");
        symbol_map.insert(r"Phi", r"Phi");
        symbol_map.insert(r"Pi", r"Pi");
        symbol_map.insert(r"Psi", r"Psi");
        symbol_map.insert(r"S", r"section");
        symbol_map.insert(r"Sigma", r"Sigma");
        symbol_map.insert(r"Theta", r"Theta");
        symbol_map.insert(r"aleph", r"alef");
        symbol_map.insert(r"alpha", r"alpha");
        symbol_map.insert(r"beta", r"beta");
        symbol_map.insert(r"bigcirc", r"circle.big");
        symbol_map.insert(r"bullet", r"bullet");
        symbol_map.insert(r"cdots", r"dots.c");
        symbol_map.insert(r"chi", r"chi");
        symbol_map.insert(r"circ", r"circle.small"); // 'circle.small' or 'compose'
        symbol_map.insert(r"colon", r"colon");
        symbol_map.insert(r"copyright", r"copyright");
        symbol_map.insert(r"delta", r"delta");
        symbol_map.insert(r"diamond", r"diamond");
        symbol_map.insert(r"emptyset", r"nothing");
        symbol_map.insert(r"epsilon", r"epsilon.alt");
        symbol_map.insert(r"eta", r"eta");
        symbol_map.insert(r"gamma", r"gamma");
        symbol_map.insert(r"ge", r"gt.eq");
        symbol_map.insert(r"hbar", r"planck.reduce");
        symbol_map.insert(r"intercal", r"top"); // 'top' or 'tack.b'
        symbol_map.insert(r"iota", r"iota");
        symbol_map.insert(r"kappa", r"kappa");
        symbol_map.insert(r"lambda", r"lambda");
        symbol_map.insert(r"land", r"and");
        symbol_map.insert(r"ldots", r"dots.h");
        symbol_map.insert(r"le", r"lt.eq");
        symbol_map.insert(r"lhd", r"triangle.l");
        symbol_map.insert(r"lor", r"or");
        symbol_map.insert(r"mu", r"mu");
        symbol_map.insert(r"neq", r"eq.not");
        symbol_map.insert(r"nu", r"nu");
        symbol_map.insert(r"ntriangleleft", r"lt.tri.not");
        symbol_map.insert(r"ntriangleright", r"gt.tri.not");
        symbol_map.insert(r"omega", r"omega");
        symbol_map.insert(r"phi", r"phi.alt");
        symbol_map.insert(r"pi", r"pi");
        symbol_map.insert(r"pounds", r"pound");
        symbol_map.insert(r"psi", r"psi");
        symbol_map.insert(r"rhd", r"triangle");
        symbol_map.insert(r"rho", r"rho");
        symbol_map.insert(r"sigma", r"sigma");
        symbol_map.insert(r"slash", r"slash");
        symbol_map.insert(r"smallsetminus", r"without");
        // symbol_map.insert(r"smile", r"paren.b");
        // symbol_map.insert(r"star", r"star");
        symbol_map.insert(r"tau", r"tau");
        symbol_map.insert(r"theta", r"theta");
        symbol_map.insert(r"to", r"arrow.r");
        symbol_map.insert(r"triangle", r"triangle.t");
        symbol_map.insert(r"upsilon", r"upsilon");
        symbol_map.insert(r"varepsilon", r"epsilon");
        // empty set
        symbol_map.insert(r"varphi", r"phi");
        symbol_map.insert(r"varpi", r"pi.alt");
        symbol_map.insert(r"varrho", r"rho.alt");
        symbol_map.insert(r"varsigma", r"sigma.alt");
        symbol_map.insert(r"vartheta", r"theta.alt");
        symbol_map.insert(r"xi", r"xi");
        symbol_map.insert(r"yen", r"yen");
        symbol_map.insert(r"zeta", r"zeta");

        // extended
        symbol_map.insert(r"mathscr", r"scr");
        symbol_map.insert(r"LaTeX", r"#LaTeX");
        symbol_map.insert(r"TeX", r"#TeX");

        symbol_map.insert(r"lparen", r"paren.l");
        symbol_map.insert(r"lParen", r"paren.l.double");
        symbol_map.insert(r"rparen", r"paren.r");
        symbol_map.insert(r"rParen", r"paren.r.double");
        symbol_map.insert(r"overparen", r"paren.t");
        symbol_map.insert(r"underparen", r"paren.b");
        symbol_map.insert(r"lBrace", r"brace.l.double");
        symbol_map.insert(r"rBrace", r"brace.r.double");
        // symbol_map.insert(r"overbrace", r"brace.t");
        symbol_map.insert(r"underbrace", r"brace.b");
        symbol_map.insert(r"lBrack", r"bracket.l.double");
        symbol_map.insert(r"rBrack", r"bracket.r.double");
        symbol_map.insert(r"overbracket", r"bracket.t");
        symbol_map.insert(r"underbracket", r"bracket.b");
        symbol_map.insert(r"lbrbrak", r"shell.l");
        symbol_map.insert(r"Lbrbrak", r"shell.l.double");
        symbol_map.insert(r"rbrbrak", r"shell.r");
        symbol_map.insert(r"Rbrbrak", r"shell.r.double");
        symbol_map.insert(r"obrbrak", r"shell.t");
        symbol_map.insert(r"ubrbrak", r"shell.b");
        symbol_map.insert(r"vert", r"bar.v");
        symbol_map.insert(r"Vert", r"bar.v.double");
        symbol_map.insert(r"Vvert", r"bar.v.triple");
        symbol_map.insert(r"circledvert", r"bar.v.circle");
        symbol_map.insert(r"horizbar", r"bar.h");
        symbol_map.insert(r"lvzigzag", r"fence.l");
        symbol_map.insert(r"Lvzigzag", r"fence.l.double");
        symbol_map.insert(r"rvzigzag", r"fence.r");
        symbol_map.insert(r"Rvzigzag", r"fence.r.double");
        symbol_map.insert(r"fourvdots", r"fence.dotted");
        symbol_map.insert(r"lcurvyangle", r"angle.l.curly");
        symbol_map.insert(r"langledot", r"angle.l.dot");
        symbol_map.insert(r"rcurvyangle", r"angle.r.curly");
        symbol_map.insert(r"rangledot", r"angle.r.dot");
        symbol_map.insert(r"angdnr", r"angle.acute");
        symbol_map.insert(r"measuredangleleft", r"angle.arc.rev");
        symbol_map.insert(r"wideangledown", r"angle.oblique");
        symbol_map.insert(r"revangle", r"angle.rev");
        symbol_map.insert(r"rightangle", r"angle.right");
        symbol_map.insert(r"measuredrightangle", r"angle.right.arc");
        symbol_map.insert(r"rightanglemdot", r"angle.right.dot");
        symbol_map.insert(r"rightanglesqr", r"angle.right.sq");
        symbol_map.insert(r"angles", r"angle.s");
        symbol_map.insert(r"threedangle", r"angle.spatial");
        symbol_map.insert(r"sphericalangle", r"angle.spheric");
        symbol_map.insert(r"gtlpar", r"angle.spheric.rev");
        symbol_map.insert(r"sphericalangleup", r"angle.spheric.top");
        symbol_map.insert(r"lceil", r"ceil.l");
        symbol_map.insert(r"rceil", r"ceil.r");
        symbol_map.insert(r"lfloor", r"floor.l");
        symbol_map.insert(r"rfloor", r"floor.r");
        symbol_map.insert(r"mathampersand", r"amp");
        symbol_map.insert(r"upand", r"amp.inv");
        symbol_map.insert(r"ast", r"ast.op");
        symbol_map.insert(r"circledast", r"ast.circle");
        symbol_map.insert(r"boxast", r"ast.square");
        symbol_map.insert(r"mathatsign", r"at");
        symbol_map.insert(r"backslash", r"backslash");
        symbol_map.insert(r"obslash", r"backslash.circle");
        symbol_map.insert(r"rsolbar", r"backslash.not");
        symbol_map.insert(r"mathcolon", r"colon");
        symbol_map.insert(r"Colon", r"colon.double");
        symbol_map.insert(r"coloneq", r"colon.eq");
        symbol_map.insert(r"Coloneq", r"colon.double.eq");
        symbol_map.insert(r"mathcomma", r"comma");
        symbol_map.insert(r"dashcolon", r"dash.colon");
        symbol_map.insert(r"circleddash", r"dash.circle");
        symbol_map.insert(r"hzigzag", r"dash.wave.double");
        symbol_map.insert(r"mathperiod", r"dot.basic");
        symbol_map.insert(r"cdotp", r"dot.c");
        symbol_map.insert(r"boxdot", r"dot.square");
        symbol_map.insert(r"dddot", r"dot.triple");
        symbol_map.insert(r"ddddot", r"dot.quad");
        symbol_map.insert(r"mathexclam", r"excl");
        symbol_map.insert(r"Exclam", r"excl.double");
        symbol_map.insert(r"mathquestion", r"quest");
        symbol_map.insert(r"Question", r"quest.double");
        symbol_map.insert(r"mathoctothorpe", r"hash");
        symbol_map.insert(r"mathhyphen", r"hyph");
        symbol_map.insert(r"mathpercent", r"percent");
        symbol_map.insert(r"mathparagraph", r"pilcrow");
        symbol_map.insert(r"mathsection", r"section");
        symbol_map.insert(r"mathsemicolon", r"semi");
        symbol_map.insert(r"mathslash", r"slash");
        symbol_map.insert(r"sslash", r"slash.double");
        symbol_map.insert(r"trslash", r"slash.triple");
        symbol_map.insert(r"xsol", r"slash.big");
        symbol_map.insert(r"unicodecdots", r"dots.h.c");
        symbol_map.insert(r"unicodeellipsis", r"dots.h");
        symbol_map.insert(r"adots", r"dots.up");
        symbol_map.insert(r"dotsim", r"tilde.dot");
        symbol_map.insert(r"sime", r"tilde.eq");
        symbol_map.insert(r"nsimeq", r"tilde.eq.not");
        symbol_map.insert(r"backsimeq", r"tilde.eq.rev");
        symbol_map.insert(r"simneqq", r"tilde.nequiv");
        symbol_map.insert(r"backsim", r"tilde.rev");
        symbol_map.insert(r"backcong", r"tilde.rev.equiv");
        symbol_map.insert(r"approxident", r"tilde.triple");
        symbol_map.insert(r"caretinsert", r"caret");
        symbol_map.insert(r"backprime", r"prime.rev");
        symbol_map.insert(r"dprime", r"prime.double");
        symbol_map.insert(r"backdprime", r"prime.double.rev");
        symbol_map.insert(r"trprime", r"prime.triple");
        symbol_map.insert(r"backtrprime", r"prime.triple.rev");
        symbol_map.insert(r"qprime", r"prime.quad");
        symbol_map.insert(r"mathplus", r"plus");
        symbol_map.insert(r"oplus", r"plus.circle");
        symbol_map.insert(r"rightarrowonoplus", r"plus.circle.arrow");
        symbol_map.insert(r"bigoplus", r"plus.circle.big");
        symbol_map.insert(r"doubleplus", r"plus.double");
        symbol_map.insert(r"boxplus", r"plus.square");
        symbol_map.insert(r"triangleplus", r"plus.triangle");
        symbol_map.insert(r"tripleplus", r"plus.triple");
        symbol_map.insert(r"minus", r"minus");
        symbol_map.insert(r"dotminus", r"minus.dot");
        symbol_map.insert(r"boxminus", r"minus.square");
        symbol_map.insert(r"eqsim", r"minus.tilde");
        symbol_map.insert(r"triangleminus", r"minus.triangle");
        symbol_map.insert(r"odiv", r"div.circle");
        symbol_map.insert(r"bigtimes", r"times.big");
        symbol_map.insert(r"triangletimes", r"times.triangle");
        symbol_map.insert(r"mathratio", r"ratio");
        symbol_map.insert(r"equal", r"eq");
        symbol_map.insert(r"stareq", r"eq.star");
        symbol_map.insert(r"circledequal", r"eq.circle");
        symbol_map.insert(r"eqcolon", r"eq.colon");
        // \usepackage{mathtools} defines \eqdef
        // https://tex.stackexchange.com/questions/28836/typesetting-the-define-equals-symbol
        symbol_map.insert(r"eqdef", r"eq.def");
        symbol_map.insert(r"triangleq", r"eq.delta");
        symbol_map.insert(r"veeeq", r"eq.equi");
        symbol_map.insert(r"wedgeq", r"eq.est");
        symbol_map.insert(r"eqgtr", r"eq.gt");
        symbol_map.insert(r"eqless", r"eq.lt");
        symbol_map.insert(r"measeq", r"eq.m");
        symbol_map.insert(r"curlyeqprec", r"eq.prec");
        symbol_map.insert(r"questeq", r"eq.quest");
        symbol_map.insert(r"curlyeqsucc", r"eq.succ");
        symbol_map.insert(r"Equiv", r"eq.quad");
        symbol_map.insert(r"greater", r"gt");
        symbol_map.insert(r"ogreaterthan", r"gt.circle");
        symbol_map.insert(r"gtrdot", r"gt.dot");
        symbol_map.insert(r"gtrapprox", r"gt.approx");
        symbol_map.insert(r"gtreqless", r"gt.eq.lt");
        symbol_map.insert(r"geqq", r"gt.equiv");
        symbol_map.insert(r"gtrless", r"gt.lt");
        symbol_map.insert(r"ngtrless", r"gt.lt.not");
        symbol_map.insert(r"gneq", r"gt.neq");
        symbol_map.insert(r"gnapprox", r"gt.napprox");
        symbol_map.insert(r"gneqq", r"gt.nequiv");
        symbol_map.insert(r"ngtr", r"gt.not");
        symbol_map.insert(r"gnsim", r"gt.ntilde");
        symbol_map.insert(r"gtrsim", r"gt.tilde");
        symbol_map.insert(r"ngtrsim", r"gt.tilde.not");
        symbol_map.insert(r"vartriangleright", r"gt.tri");
        symbol_map.insert(r"trianglerighteq", r"gt.tri.eq");
        symbol_map.insert(r"ntrianglerighteq", r"gt.tri.eq.not");
        symbol_map.insert(r"nvartriangleright", r"gt.tri.not");
        symbol_map.insert(r"ggg", r"gt.triple");
        symbol_map.insert(r"gggnest", r"gt.triple.nested");
        symbol_map.insert(r"less", r"lt");
        symbol_map.insert(r"olessthan", r"lt.circle");
        symbol_map.insert(r"lessdot", r"lt.dot");
        symbol_map.insert(r"lessapprox", r"lt.approx");
        symbol_map.insert(r"lesseqgtr", r"lt.eq.gt");
        symbol_map.insert(r"leqq", r"lt.equiv");
        symbol_map.insert(r"lessgtr", r"lt.gt");
        symbol_map.insert(r"nlessgtr", r"lt.gt.not");
        symbol_map.insert(r"lneq", r"lt.neq");
        symbol_map.insert(r"lnapprox", r"lt.napprox");
        symbol_map.insert(r"lneqq", r"lt.nequiv");
        symbol_map.insert(r"nless", r"lt.not");
        symbol_map.insert(r"lnsim", r"lt.ntilde");
        symbol_map.insert(r"lesssim", r"lt.tilde");
        symbol_map.insert(r"nlesssim", r"lt.tilde.not");
        symbol_map.insert(r"vartriangleleft", r"lt.tri");
        symbol_map.insert(r"trianglelefteq", r"lt.tri.eq");
        symbol_map.insert(r"ntrianglelefteq", r"lt.tri.eq.not");
        symbol_map.insert(r"nvartriangleleft", r"lt.tri.not");
        symbol_map.insert(r"lll", r"lt.triple");
        symbol_map.insert(r"lllnest", r"lt.triple.nested");
        symbol_map.insert(r"napprox", r"approx.not");
        symbol_map.insert(r"precapprox", r"prec.approx");
        symbol_map.insert(r"preccurlyeq", r"prec.curly.eq");
        symbol_map.insert(r"npreccurlyeq", r"prec.curly.eq.not");
        symbol_map.insert(r"Prec", r"prec.double");
        symbol_map.insert(r"preceqq", r"prec.equiv");
        symbol_map.insert(r"precnapprox", r"prec.napprox");
        symbol_map.insert(r"precneq", r"prec.neq");
        symbol_map.insert(r"precneqq", r"prec.nequiv");
        symbol_map.insert(r"nprec", r"prec.not");
        symbol_map.insert(r"precnsim", r"prec.ntilde");
        symbol_map.insert(r"precsim", r"prec.tilde");
        symbol_map.insert(r"succapprox", r"succ.approx");
        symbol_map.insert(r"succcurlyeq", r"succ.curly.eq");
        symbol_map.insert(r"nsucccurlyeq", r"succ.curly.eq.not");
        symbol_map.insert(r"Succ", r"succ.double");
        symbol_map.insert(r"succeqq", r"succ.equiv");
        symbol_map.insert(r"succnapprox", r"succ.napprox");
        symbol_map.insert(r"succneq", r"succ.neq");
        symbol_map.insert(r"succneqq", r"succ.nequiv");
        symbol_map.insert(r"nsucc", r"succ.not");
        symbol_map.insert(r"succnsim", r"succ.ntilde");
        symbol_map.insert(r"succsim", r"succ.tilde");
        symbol_map.insert(r"nequiv", r"equiv.not");
        symbol_map.insert(r"origof", r"original");
        symbol_map.insert(r"imageof", r"image");
        symbol_map.insert(r"emptysetoarr", r"emptyset.arrow.r");
        symbol_map.insert(r"emptysetoarrl", r"emptyset.arrow.l");
        symbol_map.insert(r"emptysetobar", r"emptyset.bar");
        symbol_map.insert(r"emptysetocirc", r"emptyset.circle");
        symbol_map.insert(r"revemptyset", r"emptyset.rev");
        symbol_map.insert(r"complement", r"complement");
        symbol_map.insert(r"nni", r"in.rev.not");
        symbol_map.insert(r"smallni", r"in.rev.small");
        symbol_map.insert(r"smallin", r"in.small");
        symbol_map.insert(r"subsetdot", r"subset.dot");
        symbol_map.insert(r"Subset", r"subset.double");
        symbol_map.insert(r"nsqsubseteq", r"subset.eq.sq.not");
        symbol_map.insert(r"nsubset", r"subset.not");
        symbol_map.insert(r"sqsubset", r"subset.sq");
        symbol_map.insert(r"sqsubsetneq", r"subset.sq.neq");
        symbol_map.insert(r"supsetdot", r"supset.dot");
        symbol_map.insert(r"Supset", r"supset.double");
        symbol_map.insert(r"nsupseteq", r"supset.eq.not");
        symbol_map.insert(r"nsqsupseteq", r"supset.eq.sq.not");
        symbol_map.insert(r"nsupset", r"supset.not");
        symbol_map.insert(r"sqsupset", r"supset.sq");
        symbol_map.insert(r"sqsupsetneq", r"supset.sq.neq");
        symbol_map.insert(r"cupleftarrow", r"union.arrow");
        symbol_map.insert(r"cupdot", r"union.dot");
        symbol_map.insert(r"bigcupdot", r"union.dot.big");
        symbol_map.insert(r"uminus", r"union.minus");
        symbol_map.insert(r"cupvee", r"union.or");
        symbol_map.insert(r"Sqcup", r"union.sq.double");
        symbol_map.insert(r"capwedge", r"sect.and");
        symbol_map.insert(r"capdot", r"sect.dot");
        symbol_map.insert(r"bigsqcap", r"sect.sq.big");
        symbol_map.insert(r"Sqcap", r"sect.sq.double");
        symbol_map.insert(r"nvinfty", r"infinity.bar");
        symbol_map.insert(r"iinfin", r"infinity.incomplete");
        symbol_map.insert(r"tieinfty", r"infinity.tie");
        symbol_map.insert(r"sumint", r"sum.integral");
        symbol_map.insert(r"intlarhk", r"integral.arrow.hook");
        symbol_map.insert(r"awint", r"integral.ccw");
        symbol_map.insert(r"ointctrclockwise", r"integral.cont.ccw");
        symbol_map.insert(r"varointclockwise", r"integral.cont.cw");
        symbol_map.insert(r"intclockwise", r"integral.cw");
        symbol_map.insert(r"intbar", r"integral.dash");
        symbol_map.insert(r"intBar", r"integral.dash.double");
        symbol_map.insert(r"intcap", r"integral.sect");
        symbol_map.insert(r"fint", r"integral.slash");
        symbol_map.insert(r"sqint", r"integral.square");
        symbol_map.insert(r"intx", r"integral.times");
        symbol_map.insert(r"intcup", r"integral.union");
        symbol_map.insert(r"increment", r"laplace");
        symbol_map.insert(r"bot", r"bot");
        symbol_map.insert(r"wedgedot", r"and.dot");
        symbol_map.insert(r"Wedge", r"and.double");
        symbol_map.insert(r"veedot", r"or.dot");
        symbol_map.insert(r"Vee", r"or.double");
        symbol_map.insert(r"Vdash", r"forces");
        symbol_map.insert(r"nVdash", r"forces.not");
        symbol_map.insert(r"therefore", r"therefore");
        symbol_map.insert(r"because", r"because");
        symbol_map.insert(r"QED", r"qed");
        symbol_map.insert(r"vysmwhtcircle", r"compose");
        symbol_map.insert(r"multimap", r"multimap");
        symbol_map.insert(r"dualmap", r"multimap.double");
        symbol_map.insert(r"tplus", r"tiny");
        symbol_map.insert(r"tminus", r"miny");
        symbol_map.insert(r"nhpar", r"parallel.struck");
        symbol_map.insert(r"circledparallel", r"parallel.circle");
        symbol_map.insert(r"equalparallel", r"parallel.eq");
        symbol_map.insert(r"equivVert", r"parallel.equiv");
        symbol_map.insert(r"eparsl", r"parallel.slanted.eq");
        symbol_map.insert(r"smeparsl", r"parallel.slanted.eq.tilde");
        symbol_map.insert(r"eqvparsl", r"parallel.slanted.equiv");
        symbol_map.insert(r"parsim", r"parallel.tilde");
        symbol_map.insert(r"operp", r"perp.circle");
        symbol_map.insert(r"diameter", r"diameter");
        symbol_map.insert(r"rightouterjoin", r"join.r");
        symbol_map.insert(r"leftouterjoin", r"join.l");
        symbol_map.insert(r"fullouterjoin", r"join.l.r");
        symbol_map.insert(r"smashtimes", r"smash");
        symbol_map.insert(r"mathdollar", r"dollar");
        symbol_map.insert(r"euro", r"euro");
        symbol_map.insert(r"mathsterling", r"pound");
        symbol_map.insert(r"mathyen", r"yen");
        symbol_map.insert(r"maltese", r"maltese");
        symbol_map.insert(r"clubsuit", r"suit.club.filled");
        symbol_map.insert(r"varclubsuit", r"suit.club.stroked");
        symbol_map.insert(r"vardiamondsuit", r"suit.diamond.filled");
        symbol_map.insert(r"diamondsuit", r"suit.diamond.stroked");
        symbol_map.insert(r"varheartsuit", r"suit.heart.filled");
        symbol_map.insert(r"heartsuit", r"suit.heart.stroked");
        symbol_map.insert(r"varspadesuit", r"suit.spade.stroked");
        symbol_map.insert(r"quarternote", r"note.quarter.alt");
        symbol_map.insert(r"eighthnote", r"note.eighth.alt");
        symbol_map.insert(r"twonotes", r"note.eighth.beamed");
        symbol_map.insert(r"natural", r"natural");
        symbol_map.insert(r"flat", r"flat");
        symbol_map.insert(r"sharp", r"sharp");
        symbol_map.insert(r"smblkcircle", r"bullet");
        symbol_map.insert(r"mdlgwhtcircle", r"circle.stroked");
        symbol_map.insert(r"mdsmwhtcircle", r"circle.stroked.small");
        symbol_map.insert(r"lgwhtcircle", r"circle.stroked.big");
        symbol_map.insert(r"mdlgblkcircle", r"circle.filled");
        symbol_map.insert(r"mdsmblkcircle", r"circle.filled.tiny");
        symbol_map.insert(r"vysmblkcircle", r"circle.filled.small");
        symbol_map.insert(r"lgblkcircle", r"circle.filled.big");
        symbol_map.insert(r"dottedcircle", r"circle.dotted");
        symbol_map.insert(r"circledcirc", r"circle.nested");
        symbol_map.insert(r"whthorzoval", r"ellipse.stroked.h");
        symbol_map.insert(r"whtvertoval", r"ellipse.stroked.v");
        symbol_map.insert(r"blkhorzoval", r"ellipse.filled.h");
        symbol_map.insert(r"blkvertoval", r"ellipse.filled.v");
        symbol_map.insert(r"bigtriangleup", r"triangle.stroked.t");
        symbol_map.insert(r"bigtriangledown", r"triangle.stroked.b");
        symbol_map.insert(r"triangleright", r"triangle.stroked.r");
        symbol_map.insert(r"triangleleft", r"triangle.stroked.l");
        symbol_map.insert(r"lltriangle", r"triangle.stroked.bl");
        symbol_map.insert(r"lrtriangle", r"triangle.stroked.br");
        symbol_map.insert(r"ultriangle", r"triangle.stroked.tl");
        symbol_map.insert(r"urtriangle", r"triangle.stroked.tr");
        symbol_map.insert(r"vartriangle", r"triangle.stroked.small.t");
        symbol_map.insert(r"triangledown", r"triangle.stroked.small.b");
        symbol_map.insert(r"smalltriangleright", r"triangle.stroked.small.r");
        symbol_map.insert(r"smalltriangleleft", r"triangle.stroked.small.l");
        symbol_map.insert(r"whiteinwhitetriangle", r"triangle.stroked.nested");
        symbol_map.insert(r"trianglecdot", r"triangle.stroked.dot");
        symbol_map.insert(r"bigblacktriangleup", r"triangle.filled.t");
        symbol_map.insert(r"bigblacktriangledown", r"triangle.filled.b");
        symbol_map.insert(r"blacktriangleright", r"triangle.filled.r");
        symbol_map.insert(r"blacktriangleleft", r"triangle.filled.l");
        symbol_map.insert(r"llblacktriangle", r"triangle.filled.bl");
        symbol_map.insert(r"lrblacktriangle", r"triangle.filled.br");
        symbol_map.insert(r"ulblacktriangle", r"triangle.filled.tl");
        symbol_map.insert(r"urblacktriangle", r"triangle.filled.tr");
        symbol_map.insert(r"blacktriangle", r"triangle.filled.small.t");
        symbol_map.insert(r"blacktriangledown", r"triangle.filled.small.b");
        symbol_map.insert(r"smallblacktriangleright", r"triangle.filled.small.r");
        symbol_map.insert(r"smallblacktriangleleft", r"triangle.filled.small.l");
        symbol_map.insert(r"mdlgwhtsquare", r"square.stroked");
        symbol_map.insert(r"smwhtsquare", r"square.stroked.tiny");
        symbol_map.insert(r"mdsmwhtsquare", r"square.stroked.small");
        symbol_map.insert(r"mdwhtsquare", r"square.stroked.medium");
        symbol_map.insert(r"lgwhtsquare", r"square.stroked.big");
        symbol_map.insert(r"dottedsquare", r"square.stroked.dotted");
        symbol_map.insert(r"squoval", r"square.stroked.rounded");
        symbol_map.insert(r"mdlgblksquare", r"square.filled");
        symbol_map.insert(r"smblksquare", r"square.filled.tiny");
        symbol_map.insert(r"mdsmblksquare", r"square.filled.small");
        symbol_map.insert(r"mdblksquare", r"square.filled.medium");
        symbol_map.insert(r"lgblksquare", r"square.filled.big");
        symbol_map.insert(r"hrectangle", r"rect.stroked.h");
        symbol_map.insert(r"vrectangle", r"rect.stroked.v");
        symbol_map.insert(r"hrectangleblack", r"rect.filled.h");
        symbol_map.insert(r"vrectangleblack", r"rect.filled.v");
        symbol_map.insert(r"pentagon", r"penta.stroked");
        symbol_map.insert(r"pentagonblack", r"penta.filled");
        symbol_map.insert(r"varhexagon", r"hexa.stroked");
        symbol_map.insert(r"varhexagonblack", r"hexa.filled");
        symbol_map.insert(r"mdlgwhtdiamond", r"diamond.stroked");
        symbol_map.insert(r"smwhtdiamond", r"diamond.stroked.small");
        symbol_map.insert(r"mdwhtdiamond", r"diamond.stroked.medium");
        symbol_map.insert(r"diamondcdot", r"diamond.stroked.dot");
        symbol_map.insert(r"mdlgblkdiamond", r"diamond.filled");
        symbol_map.insert(r"mdblkdiamond", r"diamond.filled.medium");
        symbol_map.insert(r"smblkdiamond", r"diamond.filled.small");
        symbol_map.insert(r"mdlgwhtlozenge", r"lozenge.stroked");
        symbol_map.insert(r"smwhtlozenge", r"lozenge.stroked.small");
        symbol_map.insert(r"mdwhtlozenge", r"lozenge.stroked.medium");
        symbol_map.insert(r"mdlgblklozenge", r"lozenge.filled");
        symbol_map.insert(r"smblklozenge", r"lozenge.filled.small");
        symbol_map.insert(r"mdblklozenge", r"lozenge.filled.medium");
        symbol_map.insert(r"parallelogram", r"parallelogram.stroked");
        symbol_map.insert(r"parallelogramblack", r"parallelogram.filled");
        symbol_map.insert(r"star", r"star.op");
        symbol_map.insert(r"bigwhitestar", r"star.stroked");
        symbol_map.insert(r"bigstar", r"star.filled");
        symbol_map.insert(r"longmapsto", r"arrow.r.long.bar");
        symbol_map.insert(r"mapsto", r"arrow.r.bar");
        symbol_map.insert(r"rightdowncurvedarrow", r"arrow.r.curve");
        symbol_map.insert(r"rightdasharrow", r"arrow.r.dashed");
        symbol_map.insert(r"rightdotarrow", r"arrow.r.dotted");
        symbol_map.insert(r"Mapsto", r"arrow.r.double.bar");
        symbol_map.insert(r"Longmapsto", r"arrow.r.double.long.bar");
        symbol_map.insert(r"nRightarrow", r"arrow.r.double.not");
        symbol_map.insert(r"longrightsquigarrow", r"arrow.r.long.squiggly");
        symbol_map.insert(r"looparrowright", r"arrow.r.loop");
        symbol_map.insert(r"nrightarrow", r"arrow.r.not");
        symbol_map.insert(r"RRightarrow", r"arrow.r.quad");
        symbol_map.insert(r"rightsquigarrow", r"arrow.r.squiggly");
        symbol_map.insert(r"rightarrowbar", r"arrow.r.stop");
        symbol_map.insert(r"rightwhitearrow", r"arrow.r.stroked");
        symbol_map.insert(r"rightarrowtail", r"arrow.r.tail");
        symbol_map.insert(r"similarrightarrow", r"arrow.r.tilde");
        symbol_map.insert(r"Rrightarrow", r"arrow.r.triple");
        symbol_map.insert(r"twoheadmapsto", r"arrow.r.twohead.bar");
        symbol_map.insert(r"rightwavearrow", r"arrow.r.wave");
        symbol_map.insert(r"mapsfrom", r"arrow.l.bar");
        symbol_map.insert(r"leftdowncurvedarrow", r"arrow.l.curve");
        symbol_map.insert(r"leftdasharrow", r"arrow.l.dashed");
        symbol_map.insert(r"leftdotarrow", r"arrow.l.dotted");
        symbol_map.insert(r"Mapsfrom", r"arrow.l.double.bar");
        symbol_map.insert(r"Longmapsfrom", r"arrow.l.double.long.bar");
        symbol_map.insert(r"nLeftarrow", r"arrow.l.double.not");
        symbol_map.insert(r"longmapsfrom", r"arrow.l.long.bar");
        symbol_map.insert(r"longleftsquigarrow", r"arrow.l.long.squiggly");
        symbol_map.insert(r"looparrowleft", r"arrow.l.loop");
        symbol_map.insert(r"LLeftarrow", r"arrow.l.quad");
        symbol_map.insert(r"leftsquigarrow", r"arrow.l.squiggly");
        symbol_map.insert(r"barleftarrow", r"arrow.l.stop");
        symbol_map.insert(r"leftwhitearrow", r"arrow.l.stroked");
        symbol_map.insert(r"leftarrowtail", r"arrow.l.tail");
        symbol_map.insert(r"similarleftarrow", r"arrow.l.tilde");
        symbol_map.insert(r"Lleftarrow", r"arrow.l.triple");
        symbol_map.insert(r"twoheadmapsfrom", r"arrow.l.twohead.bar");
        symbol_map.insert(r"twoheadleftarrow", r"arrow.l.twohead");
        symbol_map.insert(r"leftwavearrow", r"arrow.l.wave");
        symbol_map.insert(r"mapsup", r"arrow.t.bar");
        symbol_map.insert(r"uprightcurvearrow", r"arrow.t.curve");
        symbol_map.insert(r"updasharrow", r"arrow.t.dashed");
        symbol_map.insert(r"UUparrow", r"arrow.t.quad");
        symbol_map.insert(r"baruparrow", r"arrow.t.stop");
        symbol_map.insert(r"upwhitearrow", r"arrow.t.stroked");
        symbol_map.insert(r"Uuparrow", r"arrow.t.triple");
        symbol_map.insert(r"twoheaduparrow", r"arrow.t.twohead");
        symbol_map.insert(r"mapsdown", r"arrow.b.bar");
        symbol_map.insert(r"downrightcurvedarrow", r"arrow.b.curve");
        symbol_map.insert(r"downdasharrow", r"arrow.b.dashed");
        symbol_map.insert(r"DDownarrow", r"arrow.b.quad");
        symbol_map.insert(r"downarrowbar", r"arrow.b.stop");
        symbol_map.insert(r"downwhitearrow", r"arrow.b.stroked");
        symbol_map.insert(r"Ddownarrow", r"arrow.b.triple");
        symbol_map.insert(r"twoheaddownarrow", r"arrow.b.twohead");
        symbol_map.insert(r"nLeftrightarrow", r"arrow.l.r.double.not");
        symbol_map.insert(r"nleftrightarrow", r"arrow.l.r.not");
        symbol_map.insert(r"leftrightsquigarrow", r"arrow.l.r.wave");
        symbol_map.insert(r"Nearrow", r"arrow.tr.double");
        symbol_map.insert(r"hknearrow", r"arrow.tr.hook");
        symbol_map.insert(r"Searrow", r"arrow.br.double");
        symbol_map.insert(r"hksearrow", r"arrow.br.hook");
        symbol_map.insert(r"Nwarrow", r"arrow.tl.double");
        symbol_map.insert(r"hknwarrow", r"arrow.tl.hook");
        symbol_map.insert(r"Swarrow", r"arrow.bl.double");
        symbol_map.insert(r"hkswarrow", r"arrow.bl.hook");
        symbol_map.insert(r"nwsearrow", r"arrow.tl.br");
        symbol_map.insert(r"neswarrow", r"arrow.tr.bl");
        symbol_map.insert(r"acwopencirclearrow", r"arrow.ccw");
        symbol_map.insert(r"curvearrowleft", r"arrow.ccw.half");
        symbol_map.insert(r"cwopencirclearrow", r"arrow.cw");
        symbol_map.insert(r"curvearrowright", r"arrow.cw.half");
        symbol_map.insert(r"downzigzagarrow", r"arrow.zigzag");
        symbol_map.insert(r"upuparrows", r"arrows.tt");
        symbol_map.insert(r"downdownarrows", r"arrows.bb");
        symbol_map.insert(r"leftrightarrows", r"arrows.lr");
        symbol_map.insert(r"barleftarrowrightarrowbar", r"arrows.lr.stop");
        symbol_map.insert(r"rightleftarrows", r"arrows.rl");
        symbol_map.insert(r"updownarrows", r"arrows.tb");
        symbol_map.insert(r"downuparrows", r"arrows.bt");
        symbol_map.insert(r"rightthreearrows", r"arrows.rrr");
        symbol_map.insert(r"leftthreearrows", r"arrows.lll");
        symbol_map.insert(r"barrightharpoonup", r"harpoon.rt.bar");
        symbol_map.insert(r"rightharpoonupbar", r"harpoon.rt.stop");
        symbol_map.insert(r"barrightharpoondown", r"harpoon.rb.bar");
        symbol_map.insert(r"rightharpoondownbar", r"harpoon.rb.stop");
        symbol_map.insert(r"leftharpoonupbar", r"harpoon.lt.bar");
        symbol_map.insert(r"barleftharpoonup", r"harpoon.lt.stop");
        symbol_map.insert(r"leftharpoondownbar", r"harpoon.lb.bar");
        symbol_map.insert(r"barleftharpoondown", r"harpoon.lb.stop");
        symbol_map.insert(r"upharpoonleft", r"harpoon.tl");
        symbol_map.insert(r"upharpoonleftbar", r"harpoon.tl.bar");
        symbol_map.insert(r"barupharpoonleft", r"harpoon.tl.stop");
        symbol_map.insert(r"upharpoonrightbar", r"harpoon.tr.bar");
        symbol_map.insert(r"barupharpoonright", r"harpoon.tr.stop");
        symbol_map.insert(r"downharpoonleft", r"harpoon.bl");
        symbol_map.insert(r"bardownharpoonleft", r"harpoon.bl.bar");
        symbol_map.insert(r"downharpoonleftbar", r"harpoon.bl.stop");
        symbol_map.insert(r"downharpoonright", r"harpoon.br");
        symbol_map.insert(r"bardownharpoonright", r"harpoon.br.bar");
        symbol_map.insert(r"downharpoonrightbar", r"harpoon.br.stop");
        symbol_map.insert(r"leftrightharpoonupup", r"harpoon.lt.rt");
        symbol_map.insert(r"leftrightharpoondowndown", r"harpoon.lb.rb");
        symbol_map.insert(r"leftrightharpoondownup", r"harpoon.lb.rt");
        symbol_map.insert(r"leftrightharpoonupdown", r"harpoon.lt.rb");
        symbol_map.insert(r"updownharpoonleftleft", r"harpoon.tl.bl");
        symbol_map.insert(r"updownharpoonrightright", r"harpoon.tr.br");
        symbol_map.insert(r"updownharpoonleftright", r"harpoon.tl.br");
        symbol_map.insert(r"updownharpoonrightleft", r"harpoon.tr.bl");
        symbol_map.insert(r"rightharpoonsupdown", r"harpoons.rtrb");
        symbol_map.insert(r"downharpoonsleftright", r"harpoons.blbr");
        symbol_map.insert(r"downupharpoonsleftright", r"harpoons.bltr");
        symbol_map.insert(r"leftrightharpoonsdown", r"harpoons.lbrb");
        symbol_map.insert(r"leftharpoonsupdown", r"harpoons.ltlb");
        symbol_map.insert(r"leftrightharpoons", r"harpoons.ltrb");
        symbol_map.insert(r"leftrightharpoonsup", r"harpoons.ltrt");
        symbol_map.insert(r"rightleftharpoonsdown", r"harpoons.rblb");
        symbol_map.insert(r"rightleftharpoonsup", r"harpoons.rtlt");
        symbol_map.insert(r"updownharpoonsleftright", r"harpoons.tlbr");
        symbol_map.insert(r"upharpoonsleftright", r"harpoons.tltr");
        symbol_map.insert(r"nvdash", r"tack.r.not");
        symbol_map.insert(r"vlongdash", r"tack.r.long");
        symbol_map.insert(r"assert", r"tack.r.short");
        symbol_map.insert(r"vDash", r"tack.r.double");
        symbol_map.insert(r"nvDash", r"tack.r.double.not");
        symbol_map.insert(r"longdashv", r"tack.l.long");
        symbol_map.insert(r"shortlefttack", r"tack.l.short");
        symbol_map.insert(r"Dashv", r"tack.l.double");
        symbol_map.insert(r"bigbot", r"tack.t.big");
        symbol_map.insert(r"Vbar", r"tack.t.double");
        symbol_map.insert(r"shortuptack", r"tack.t.short");
        symbol_map.insert(r"bigtop", r"tack.b.big");
        symbol_map.insert(r"barV", r"tack.b.double");
        symbol_map.insert(r"shortdowntack", r"tack.b.short");
        symbol_map.insert(r"dashVdash", r"tack.l.r");
        symbol_map.insert(r"mupalpha", r"alpha");
        symbol_map.insert(r"mupbeta", r"beta");
        symbol_map.insert(r"mupchi", r"chi");
        symbol_map.insert(r"mupdelta", r"delta");
        symbol_map.insert(r"mupvarepsilon", r"epsilon");
        symbol_map.insert(r"mupepsilon", r"epsilon.alt");
        symbol_map.insert(r"mupeta", r"eta");
        symbol_map.insert(r"mupgamma", r"gamma");
        symbol_map.insert(r"mupiota", r"iota");
        symbol_map.insert(r"mupkappa", r"kappa");
        symbol_map.insert(r"mupvarkappa", r"kappa.alt");
        symbol_map.insert(r"muplambda", r"lambda");
        symbol_map.insert(r"mupmu", r"mu");
        symbol_map.insert(r"mupnu", r"nu");
        symbol_map.insert(r"mho", r"ohm.inv");
        symbol_map.insert(r"mupomega", r"omega");
        symbol_map.insert(r"mupomicron", r"omicron");
        symbol_map.insert(r"mupvarphi", r"phi");
        symbol_map.insert(r"mupphi", r"phi.alt");
        symbol_map.insert(r"muppi", r"pi");
        symbol_map.insert(r"mupvarpi", r"pi.alt");
        symbol_map.insert(r"muppsi", r"psi");
        symbol_map.insert(r"muprho", r"rho");
        symbol_map.insert(r"mupvarrho", r"rho.alt");
        symbol_map.insert(r"mupsigma", r"sigma");
        symbol_map.insert(r"mupvarsigma", r"sigma.alt");
        symbol_map.insert(r"muptau", r"tau");
        symbol_map.insert(r"muptheta", r"theta");
        symbol_map.insert(r"mupvartheta", r"theta.alt");
        symbol_map.insert(r"mupupsilon", r"upsilon");
        symbol_map.insert(r"mupxi", r"xi");
        symbol_map.insert(r"mupzeta", r"zeta");
        symbol_map.insert(r"mupAlpha", r"Alpha");
        symbol_map.insert(r"mupBeta", r"Beta");
        symbol_map.insert(r"mupChi", r"Chi");
        symbol_map.insert(r"mupDelta", r"Delta");
        symbol_map.insert(r"mupEpsilon", r"Epsilon");
        symbol_map.insert(r"mupEta", r"Eta");
        symbol_map.insert(r"mupGamma", r"Gamma");
        symbol_map.insert(r"mupIota", r"Iota");
        symbol_map.insert(r"mupKappa", r"Kappa");
        symbol_map.insert(r"mupLambda", r"Lambda");
        symbol_map.insert(r"mupMu", r"Mu");
        symbol_map.insert(r"mupNu", r"Nu");
        symbol_map.insert(r"mupOmega", r"Omega");
        symbol_map.insert(r"mupOmicron", r"Omicron");
        symbol_map.insert(r"mupPhi", r"Phi");
        symbol_map.insert(r"mupPi", r"Pi");
        symbol_map.insert(r"mupPsi", r"Psi");
        symbol_map.insert(r"mupRho", r"Rho");
        symbol_map.insert(r"mupSigma", r"Sigma");
        symbol_map.insert(r"mupTau", r"Tau");
        symbol_map.insert(r"mupTheta", r"Theta");
        symbol_map.insert(r"mupUpsilon", r"Upsilon");
        symbol_map.insert(r"mupXi", r"Xi");
        symbol_map.insert(r"mupZeta", r"Zeta");
        symbol_map.insert(r"BbbA", r"AA");
        symbol_map.insert(r"BbbB", r"BB");
        symbol_map.insert(r"BbbC", r"CC");
        symbol_map.insert(r"BbbD", r"DD");
        symbol_map.insert(r"BbbE", r"EE");
        symbol_map.insert(r"BbbF", r"FF");
        symbol_map.insert(r"BbbG", r"GG");
        symbol_map.insert(r"BbbH", r"HH");
        symbol_map.insert(r"BbbI", r"II");
        symbol_map.insert(r"BbbJ", r"JJ");
        symbol_map.insert(r"BbbK", r"KK");
        symbol_map.insert(r"BbbL", r"LL");
        symbol_map.insert(r"BbbM", r"MM");
        symbol_map.insert(r"BbbN", r"NN");
        symbol_map.insert(r"BbbO", r"OO");
        symbol_map.insert(r"BbbP", r"PP");
        symbol_map.insert(r"BbbQ", r"QQ");
        symbol_map.insert(r"BbbR", r"RR");
        symbol_map.insert(r"BbbS", r"SS");
        symbol_map.insert(r"BbbT", r"TT");
        symbol_map.insert(r"BbbU", r"UU");
        symbol_map.insert(r"BbbV", r"VV");
        symbol_map.insert(r"BbbW", r"WW");
        symbol_map.insert(r"BbbX", r"XX");
        symbol_map.insert(r"BbbY", r"YY");
        symbol_map.insert(r"BbbZ", r"ZZ");
        symbol_map.insert(r"Planckconst", r"planck");
        symbol_map.insert(r"hslash", r"planck.reduce");
        symbol_map.insert(r"Angstrom", r"angstrom");
        symbol_map.insert(r"Re", r"Re");
        symbol_map.insert(r"Im", r"Im");

        // force override
        symbol_map.insert(r"frac", r"frac");
        symbol_map.insert(r"tilde", r"tilde");
        symbol_map.insert(r"hat", r"hat");
        symbol_map.insert(r"upright", r"mathrm");
        symbol_map.insert(r"bold", r"boldsymbol");

        symbol_map.insert(r"hyph.minus", r"\\text{-}");

        symbol_map
    })
}
