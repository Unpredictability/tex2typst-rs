use std::collections::HashMap;
use std::sync::OnceLock;

//noinspection ALL
pub fn get_symbol_map() -> &'static HashMap<&'static str, &'static str> {
    static SYMBOL_MAP: OnceLock<HashMap<&str, &str>> = OnceLock::new();
    SYMBOL_MAP.get_or_init(|| {
        let mut symbol_map = HashMap::new();
        symbol_map.insert("nonumber", "");
        symbol_map.insert("vec", "arrow");
        symbol_map.insert("overrightarrow", "arrow");
        symbol_map.insert("dot", "dot");
        symbol_map.insert("ddot", "dot.double");
        symbol_map.insert("doteq", "dot(eq)");
        symbol_map.insert("dots", "dots.h");
        symbol_map.insert("widehat", "hat"); // Ideally, the result of \widehat should be longer than \hat. But it is not implemented now.
        symbol_map.insert("widetilde", "tilde"); // Ideally, the result of \widetilde should be longer than \tilde. But it is not implemented now.
        symbol_map.insert("quad", "quad");
        symbol_map.insert("qquad", "wide");
        symbol_map.insert("overbrace", "overbrace"); // same
        symbol_map.insert("underbrace", "underbrace"); // same
        symbol_map.insert("overline", "overline"); // same
        symbol_map.insert("underline", "underline"); // same
        symbol_map.insert("bar", "macron");
        symbol_map.insert("dbinom", "binom");
        symbol_map.insert("tbinom", "binom");
        symbol_map.insert("dfrac", "frac");
        symbol_map.insert("tfrac", "frac");

        symbol_map.insert("operatorname", "op");

        symbol_map.insert("boldsymbol", "bold");
        symbol_map.insert("mathbb", "bb");
        symbol_map.insert("mathbf", "bold");
        symbol_map.insert("mathcal", "cal");
        symbol_map.insert("mathit", "italic");
        symbol_map.insert("mathfrak", "frak");
        symbol_map.insert("mathrm", "upright");
        symbol_map.insert("mathsf", "sans");
        symbol_map.insert("mathtt", "mono");

        symbol_map.insert("rm", "upright");

        // TODO: \pmb need special logic to handle but it is not implemented now. See the commented test case.
        symbol_map.insert("pmb", "bold");

        /* variants of plus,minus,times,divide */
        symbol_map.insert("pm", "plus.minus");
        symbol_map.insert("mp", "minus.plus");
        symbol_map.insert("boxplus", "plus.square");
        symbol_map.insert("otimes", "times.circle");
        symbol_map.insert("boxtimes", "times.square");

        /* wave */
        // tex: \sim \approx \cong \simeq \asymp \equiv \propto
        // typst: tilde.op approx tilde.equiv tilde.eq ≍ equiv prop
        symbol_map.insert("approx", "approx");
        symbol_map.insert("cong", "tilde.equiv");
        symbol_map.insert("simeq", "tilde.eq");
        symbol_map.insert("asymp", "≍"); // just use the Unicode character :-)
        symbol_map.insert("equiv", "equiv");
        symbol_map.insert("propto", "prop");

        /* arrows */
        symbol_map.insert("gets", "arrow.l");
        symbol_map.insert("hookleftarrow", "arrow.l.hook");
        symbol_map.insert("leftharpoonup", "harpoon.lt");
        symbol_map.insert("leftharpoondown", "harpoon.lb");
        symbol_map.insert("rightleftharpoons", "harpoons.rtlb");
        symbol_map.insert("longleftarrow", "arrow.l.long");
        symbol_map.insert("longrightarrow", "arrow.r.long");
        symbol_map.insert("longleftrightarrow", "arrow.l.r.long");
        symbol_map.insert("Longleftarrow", "arrow.l.double.long");
        symbol_map.insert("Longrightarrow", "arrow.r.double.long");
        symbol_map.insert("Longleftrightarrow", "arrow.l.r.double.long");
        // symbol_map.insert("longmapsto", "arrow.r.bar");
        symbol_map.insert("hookrightarrow", "arrow.r.hook");
        symbol_map.insert("rightharpoonup", "harpoon.rt");
        symbol_map.insert("rightharpoondown", "harpoon.rb");
        symbol_map.insert("iff", "arrow.l.r.double.long");
        symbol_map.insert("implies", "arrow.r.double.long");
        symbol_map.insert("uparrow", "arrow.t");
        symbol_map.insert("downarrow", "arrow.b");
        symbol_map.insert("updownarrow", "arrow.t.b");
        symbol_map.insert("Uparrow", "arrow.t.double");
        symbol_map.insert("Downarrow", "arrow.b.double");
        symbol_map.insert("Updownarrow", "arrow.t.b.double");
        symbol_map.insert("nearrow", "arrow.tr");
        symbol_map.insert("searrow", "arrow.br");
        symbol_map.insert("swarrow", "arrow.bl");
        symbol_map.insert("nwarrow", "arrow.tl");
        symbol_map.insert("leadsto", "arrow.squiggly");

        symbol_map.insert("leftleftarrows", "arrows.ll");
        symbol_map.insert("rightrightarrows", "arrows.rr");

        symbol_map.insert("Cap", "sect.double");
        symbol_map.insert("Cup", "union.double");
        symbol_map.insert("Delta", "Delta");
        symbol_map.insert("Gamma", "Gamma");
        symbol_map.insert("Join", "join");
        symbol_map.insert("Lambda", "Lambda");
        symbol_map.insert("Leftarrow", "arrow.l.double");
        symbol_map.insert("Leftrightarrow", "arrow.l.r.double");
        symbol_map.insert("Longrightarrow", "arrow.r.double.long");
        symbol_map.insert("Omega", "Omega");
        symbol_map.insert("P", "pilcrow");
        symbol_map.insert("Phi", "Phi");
        symbol_map.insert("Pi", "Pi");
        symbol_map.insert("Psi", "Psi");
        symbol_map.insert("Rightarrow", "arrow.r.double");
        symbol_map.insert("S", "section");
        symbol_map.insert("Sigma", "Sigma");
        symbol_map.insert("Theta", "Theta");
        symbol_map.insert("aleph", "alef");
        symbol_map.insert("alpha", "alpha");
        // symbol_map.insert("amalg", "product.co");
        symbol_map.insert("angle", "angle");
        symbol_map.insert("approx", "approx");
        symbol_map.insert("approxeq", "approx.eq");
        // symbol_map.insert("ast", "ast");
        symbol_map.insert("beta", "beta");
        symbol_map.insert("bigcap", "sect.big");
        symbol_map.insert("bigcirc", "circle.big");
        symbol_map.insert("bigcup", "union.big");
        symbol_map.insert("bigodot", "dot.circle.big");
        // symbol_map.insert("bigoplus", "xor.big"); // or "plus.circle.big"
        symbol_map.insert("bigotimes", "times.circle.big");
        symbol_map.insert("bigsqcup", "union.sq.big");
        // symbol_map.insert("bigtriangledown", "triangle.b");
        // symbol_map.insert("bigtriangleup", "triangle.t");
        symbol_map.insert("biguplus", "union.plus.big");
        symbol_map.insert("bigvee", "or.big");
        symbol_map.insert("bigwedge", "and.big");
        // symbol_map.insert("bowtie", "join");
        symbol_map.insert("bullet", "bullet");
        symbol_map.insert("cap", "sect");
        symbol_map.insert("cdot", "dot.op"); // 'dot.op' or 'dot.c'
        symbol_map.insert("cdots", "dots.c");
        symbol_map.insert("checkmark", "checkmark");
        symbol_map.insert("chi", "chi");
        symbol_map.insert("circ", "circle.small"); // 'circle.small' or 'compose'
        symbol_map.insert("colon", "colon");
        symbol_map.insert("cong", "tilde.equiv");
        symbol_map.insert("coprod", "product.co");
        symbol_map.insert("copyright", "copyright");
        symbol_map.insert("cup", "union");
        symbol_map.insert("curlyvee", "or.curly");
        symbol_map.insert("curlywedge", "and.curly");
        symbol_map.insert("dagger", "dagger");
        symbol_map.insert("dashv", "tack.l");
        symbol_map.insert("ddagger", "dagger.double");
        symbol_map.insert("delta", "delta");
        symbol_map.insert("ddots", "dots.down");
        symbol_map.insert("diamond", "diamond");
        symbol_map.insert("div", "div");
        symbol_map.insert("divideontimes", "times.div");
        symbol_map.insert("dotplus", "plus.dot");
        symbol_map.insert("downarrow", "arrow.b");
        symbol_map.insert("ell", "ell");
        symbol_map.insert("emptyset", "nothing");
        symbol_map.insert("epsilon", "epsilon.alt");
        symbol_map.insert("equiv", "equiv");
        symbol_map.insert("eta", "eta");
        symbol_map.insert("exists", "exists");
        symbol_map.insert("forall", "forall");
        // symbol_map.insert("frown", "paren.t");
        symbol_map.insert("gamma", "gamma");
        symbol_map.insert("ge", "gt.eq");
        symbol_map.insert("geq", "gt.eq");
        symbol_map.insert("geqslant", "gt.eq.slant");
        symbol_map.insert("gg", "gt.double");
        symbol_map.insert("hbar", "planck.reduce");
        symbol_map.insert("imath", "dotless.i");
        symbol_map.insert("iiiint", "integral.quad");
        symbol_map.insert("iiint", "integral.triple");
        symbol_map.insert("iint", "integral.double");
        symbol_map.insert("in", "in");
        symbol_map.insert("infty", "infinity");
        symbol_map.insert("int", "integral");
        symbol_map.insert("intercal", "top"); // 'top' or 'tack.b'
        symbol_map.insert("iota", "iota");
        symbol_map.insert("jmath", "dotless.j");
        symbol_map.insert("kappa", "kappa");
        symbol_map.insert("lambda", "lambda");
        symbol_map.insert("land", "and");
        symbol_map.insert("langle", "angle.l");
        symbol_map.insert("lbrace", "brace.l");
        symbol_map.insert("lbrack", "bracket.l");
        symbol_map.insert("ldots", "dots.h");
        symbol_map.insert("le", "lt.eq");
        symbol_map.insert("leadsto", "arrow.squiggly");
        symbol_map.insert("leftarrow", "arrow.l");
        symbol_map.insert("leftthreetimes", "times.three.l");
        symbol_map.insert("leftrightarrow", "arrow.l.r");
        symbol_map.insert("leq", "lt.eq");
        symbol_map.insert("leqslant", "lt.eq.slant");
        symbol_map.insert("lhd", "triangle.l");
        symbol_map.insert("ll", "lt.double");
        // symbol_map.insert("longmapsto", "arrow.bar.long");
        // symbol_map.insert("longrightarrow", "arrow.long");
        symbol_map.insert("lor", "or");
        symbol_map.insert("ltimes", "times.l");
        // symbol_map.insert("mapsto", "arrow.bar");
        symbol_map.insert("measuredangle", "angle.arc");
        symbol_map.insert("mid", "divides");
        symbol_map.insert("models", "models");
        symbol_map.insert("mp", "minus.plus");
        symbol_map.insert("mu", "mu");
        // symbol_map.insert("nRightarrow", "arrow.double.not");
        symbol_map.insert("nabla", "nabla");
        symbol_map.insert("ncong", "tilde.equiv.not");
        symbol_map.insert("ne", "eq.not");
        symbol_map.insert("neg", "not");
        symbol_map.insert("neq", "eq.not");
        symbol_map.insert("nexists", "exists.not");
        symbol_map.insert("ni", "in.rev");
        symbol_map.insert("nleftarrow", "arrow.l.not");
        symbol_map.insert("nleq", "lt.eq.not");
        symbol_map.insert("nparallel", "parallel.not");
        symbol_map.insert("ngeq", "gt.eq.not");
        symbol_map.insert("nmid", "divides.not");
        symbol_map.insert("notin", "in.not");
        // symbol_map.insert("nrightarrow", "arrow.not");
        symbol_map.insert("nsim", "tilde.not");
        symbol_map.insert("nsubseteq", "subset.eq.not");
        symbol_map.insert("nu", "nu");
        symbol_map.insert("ntriangleleft", "lt.tri.not");
        symbol_map.insert("ntriangleright", "gt.tri.not");
        symbol_map.insert("nwarrow", "arrow.tl");
        symbol_map.insert("odot", "dot.circle");
        symbol_map.insert("oint", "integral.cont");
        symbol_map.insert("oiint", "integral.surf");
        symbol_map.insert("oiiint", "integral.vol");
        symbol_map.insert("omega", "omega");
        // symbol_map.insert("omicron", "omicron");
        symbol_map.insert("ominus", "minus.circle");
        // symbol_map.insert("oplus", "xor"); // or 'plus.circle'
        symbol_map.insert("otimes", "times.circle");
        symbol_map.insert("parallel", "parallel");
        symbol_map.insert("partial", "diff");
        symbol_map.insert("perp", "perp");
        symbol_map.insert("phi", "phi.alt");
        symbol_map.insert("pi", "pi");
        symbol_map.insert("pm", "plus.minus");
        symbol_map.insert("pounds", "pound");
        symbol_map.insert("prec", "prec");
        symbol_map.insert("preceq", "prec.eq");
        symbol_map.insert("prime", "prime");
        symbol_map.insert("prod", "product");
        symbol_map.insert("propto", "prop");
        symbol_map.insert("psi", "psi");
        symbol_map.insert("rangle", "angle.r");
        symbol_map.insert("rbrace", "brace.r");
        symbol_map.insert("rbrack", "bracket.r");
        symbol_map.insert("rhd", "triangle");
        symbol_map.insert("rho", "rho");
        symbol_map.insert("rightarrow", "arrow.r");
        symbol_map.insert("rightthreetimes", "times.three.r");
        symbol_map.insert("rtimes", "times.r");
        symbol_map.insert("setminus", "without");
        symbol_map.insert("sigma", "sigma");
        symbol_map.insert("sim", "tilde.op");
        symbol_map.insert("simeq", "tilde.eq");
        symbol_map.insert("slash", "slash");
        symbol_map.insert("smallsetminus", "without");
        // symbol_map.insert("smile", "paren.b");
        symbol_map.insert("spadesuit", "suit.spade");
        symbol_map.insert("sqcap", "sect.sq");
        symbol_map.insert("sqcup", "union.sq");
        symbol_map.insert("sqsubseteq", "subset.eq.sq");
        symbol_map.insert("sqsupseteq", "supset.eq.sq");
        // symbol_map.insert("star", "star");
        symbol_map.insert("subset", "subset");
        symbol_map.insert("subseteq", "subset.eq");
        symbol_map.insert("subsetneq", "subset.neq");
        symbol_map.insert("succ", "succ");
        symbol_map.insert("succeq", "succ.eq");
        symbol_map.insert("sum", "sum");
        symbol_map.insert("supset", "supset");
        symbol_map.insert("supseteq", "supset.eq");
        symbol_map.insert("supsetneq", "supset.neq");
        symbol_map.insert("swarrow", "arrow.bl");
        symbol_map.insert("tau", "tau");
        symbol_map.insert("theta", "theta");
        symbol_map.insert("times", "times");
        symbol_map.insert("to", "arrow.r");
        symbol_map.insert("top", "top");
        symbol_map.insert("triangle", "triangle.t");
        // symbol_map.insert("triangledown", "triangle.b.small");
        // symbol_map.insert("triangleleft", "triangle.l.small");
        // symbol_map.insert("triangleright", "triangle.r.small");
        symbol_map.insert("twoheadrightarrow", "arrow.r.twohead");
        symbol_map.insert("uparrow", "arrow.t");
        symbol_map.insert("updownarrow", "arrow.t.b");
        symbol_map.insert("upharpoonright", "harpoon.tr");
        symbol_map.insert("uplus", "union.plus");
        symbol_map.insert("upsilon", "upsilon");
        symbol_map.insert("varepsilon", "epsilon");
        symbol_map.insert("varnothing", "diameter"); // empty set
        symbol_map.insert("varphi", "phi");
        symbol_map.insert("varpi", "pi.alt");
        symbol_map.insert("varrho", "rho.alt");
        symbol_map.insert("varsigma", "sigma.alt");
        symbol_map.insert("vartheta", "theta.alt");
        symbol_map.insert("vdash", "tack.r");
        symbol_map.insert("vdots", "dots.v");
        symbol_map.insert("vee", "or");
        symbol_map.insert("wedge", "and");
        symbol_map.insert("wr", "wreath");
        symbol_map.insert("xi", "xi");
        symbol_map.insert("yen", "yen");
        symbol_map.insert("zeta", "zeta");

        // extended
        symbol_map.insert("mathscr", "scr");
        symbol_map.insert("LaTeX", "#LaTeX");
        symbol_map.insert("TeX", "#TeX");

        symbol_map.insert("lparen", "paren.l");
        symbol_map.insert("lParen", "paren.l.double");
        symbol_map.insert("rparen", "paren.r");
        symbol_map.insert("rParen", "paren.r.double");
        symbol_map.insert("overparen", "paren.t");
        symbol_map.insert("underparen", "paren.b");
        symbol_map.insert("lbrace", "brace.l");
        symbol_map.insert("lBrace", "brace.l.double");
        symbol_map.insert("rbrace", "brace.r");
        symbol_map.insert("rBrace", "brace.r.double");
        symbol_map.insert("lbrack", "bracket.l");
        symbol_map.insert("lBrack", "bracket.l.double");
        symbol_map.insert("rbrack", "bracket.r");
        symbol_map.insert("rBrack", "bracket.r.double");
        symbol_map.insert("overbracket", "bracket.t");
        symbol_map.insert("underbracket", "bracket.b");
        symbol_map.insert("lbrbrak", "shell.l");
        symbol_map.insert("Lbrbrak", "shell.l.double");
        symbol_map.insert("rbrbrak", "shell.r");
        symbol_map.insert("Rbrbrak", "shell.r.double");
        symbol_map.insert("obrbrak", "shell.t");
        symbol_map.insert("ubrbrak", "shell.b");
        symbol_map.insert("vert", "bar.v");
        symbol_map.insert("Vert", "bar.v.double");
        symbol_map.insert("Vvert", "bar.v.triple");
        symbol_map.insert("circledvert", "bar.v.circle");
        symbol_map.insert("horizbar", "bar.h");
        symbol_map.insert("lvzigzag", "fence.l");
        symbol_map.insert("Lvzigzag", "fence.l.double");
        symbol_map.insert("rvzigzag", "fence.r");
        symbol_map.insert("Rvzigzag", "fence.r.double");
        symbol_map.insert("fourvdots", "fence.dotted");
        symbol_map.insert("angle", "angle");
        symbol_map.insert("langle", "angle.l");
        symbol_map.insert("lcurvyangle", "angle.l.curly");
        symbol_map.insert("langledot", "angle.l.dot");
        symbol_map.insert("rangle", "angle.r");
        symbol_map.insert("rcurvyangle", "angle.r.curly");
        symbol_map.insert("rangledot", "angle.r.dot");
        symbol_map.insert("angdnr", "angle.acute");
        symbol_map.insert("measuredangle", "angle.arc");
        symbol_map.insert("measuredangleleft", "angle.arc.rev");
        symbol_map.insert("wideangledown", "angle.oblique");
        symbol_map.insert("revangle", "angle.rev");
        symbol_map.insert("rightangle", "angle.right");
        symbol_map.insert("measuredrightangle", "angle.right.arc");
        symbol_map.insert("rightanglemdot", "angle.right.dot");
        symbol_map.insert("rightanglesqr", "angle.right.sq");
        symbol_map.insert("angles", "angle.s");
        symbol_map.insert("threedangle", "angle.spatial");
        symbol_map.insert("sphericalangle", "angle.spheric");
        symbol_map.insert("gtlpar", "angle.spheric.rev");
        symbol_map.insert("sphericalangleup", "angle.spheric.top");
        symbol_map.insert("lceil", "ceil.l");
        symbol_map.insert("rceil", "ceil.r");
        symbol_map.insert("lfloor", "floor.l");
        symbol_map.insert("rfloor", "floor.r");
        symbol_map.insert("mathampersand", "amp");
        symbol_map.insert("upand", "amp.inv");
        symbol_map.insert("ast", "ast.op");
        symbol_map.insert("circledast", "ast.circle");
        symbol_map.insert("boxast", "ast.square");
        symbol_map.insert("mathatsign", "at");
        symbol_map.insert("backslash", "backslash");
        symbol_map.insert("obslash", "backslash.circle");
        symbol_map.insert("rsolbar", "backslash.not");
        symbol_map.insert("mathcolon", "colon");
        symbol_map.insert("Colon", "colon.double");
        symbol_map.insert("coloneq", "colon.eq");
        symbol_map.insert("Coloneq", "colon.double.eq");
        symbol_map.insert("mathcomma", "comma");
        symbol_map.insert("dagger", "dagger");
        symbol_map.insert("ddagger", "dagger.double");
        symbol_map.insert("dashcolon", "dash.colon");
        symbol_map.insert("circleddash", "dash.circle");
        symbol_map.insert("hzigzag", "dash.wave.double");
        symbol_map.insert("cdot", "dot.op");
        symbol_map.insert("mathperiod", "dot.basic");
        symbol_map.insert("cdotp", "dot.c");
        symbol_map.insert("odot", "dot.circle");
        symbol_map.insert("bigodot", "dot.circle.big");
        symbol_map.insert("boxdot", "dot.square");
        symbol_map.insert("dddot", "dot.triple");
        symbol_map.insert("ddddot", "dot.quad");
        symbol_map.insert("mathexclam", "excl");
        symbol_map.insert("Exclam", "excl.double");
        symbol_map.insert("mathquestion", "quest");
        symbol_map.insert("Question", "quest.double");
        symbol_map.insert("mathoctothorpe", "hash");
        // symbol_map.insert("mathhyphen", "hyph");
        symbol_map.insert("mathpercent", "percent");
        symbol_map.insert("mathparagraph", "pilcrow");
        symbol_map.insert("mathsection", "section");
        symbol_map.insert("mathsemicolon", "semi");
        symbol_map.insert("mathslash", "slash");
        symbol_map.insert("sslash", "slash.double");
        symbol_map.insert("trslash", "slash.triple");
        symbol_map.insert("xsol", "slash.big");
        symbol_map.insert("unicodecdots", "dots.h.c");
        symbol_map.insert("unicodeellipsis", "dots.h");
        symbol_map.insert("vdots", "dots.v");
        symbol_map.insert("ddots", "dots.down");
        symbol_map.insert("adots", "dots.up");
        symbol_map.insert("sim", "tilde.op");
        symbol_map.insert("dotsim", "tilde.dot");
        symbol_map.insert("sime", "tilde.eq");
        symbol_map.insert("nsimeq", "tilde.eq.not");
        symbol_map.insert("backsimeq", "tilde.eq.rev");
        symbol_map.insert("cong", "tilde.equiv");
        symbol_map.insert("ncong", "tilde.equiv.not");
        symbol_map.insert("simneqq", "tilde.nequiv");
        symbol_map.insert("nsim", "tilde.not");
        symbol_map.insert("backsim", "tilde.rev");
        symbol_map.insert("backcong", "tilde.rev.equiv");
        symbol_map.insert("approxident", "tilde.triple");
        symbol_map.insert("caretinsert", "caret");
        symbol_map.insert("prime", "prime");
        symbol_map.insert("backprime", "prime.rev");
        symbol_map.insert("dprime", "prime.double");
        symbol_map.insert("backdprime", "prime.double.rev");
        symbol_map.insert("trprime", "prime.triple");
        symbol_map.insert("backtrprime", "prime.triple.rev");
        symbol_map.insert("qprime", "prime.quad");
        symbol_map.insert("mathplus", "plus");
        symbol_map.insert("oplus", "plus.circle");
        symbol_map.insert("rightarrowonoplus", "plus.circle.arrow");
        symbol_map.insert("bigoplus", "plus.circle.big");
        symbol_map.insert("dotplus", "plus.dot");
        symbol_map.insert("doubleplus", "plus.double");
        symbol_map.insert("pm", "plus.minus");
        symbol_map.insert("boxplus", "plus.square");
        symbol_map.insert("triangleplus", "plus.triangle");
        symbol_map.insert("tripleplus", "plus.triple");
        symbol_map.insert("minus", "minus");
        symbol_map.insert("ominus", "minus.circle");
        symbol_map.insert("dotminus", "minus.dot");
        symbol_map.insert("mp", "minus.plus");
        symbol_map.insert("boxminus", "minus.square");
        symbol_map.insert("eqsim", "minus.tilde");
        symbol_map.insert("triangleminus", "minus.triangle");
        symbol_map.insert("div", "div");
        symbol_map.insert("odiv", "div.circle");
        symbol_map.insert("times", "times");
        symbol_map.insert("bigtimes", "times.big");
        symbol_map.insert("otimes", "times.circle");
        symbol_map.insert("bigotimes", "times.circle.big");
        symbol_map.insert("divideontimes", "times.div");
        symbol_map.insert("leftthreetimes", "times.three.l");
        symbol_map.insert("rightthreetimes", "times.three.r");
        symbol_map.insert("ltimes", "times.l");
        symbol_map.insert("rtimes", "times.r");
        symbol_map.insert("boxtimes", "times.square");
        symbol_map.insert("triangletimes", "times.triangle");
        symbol_map.insert("mathratio", "ratio");
        symbol_map.insert("equal", "eq");
        symbol_map.insert("stareq", "eq.star");
        symbol_map.insert("circledequal", "eq.circle");
        symbol_map.insert("eqcolon", "eq.colon");
        // \usepackage{mathtools} defines \eqdef
        // https://tex.stackexchange.com/questions/28836/typesetting-the-define-equals-symbol
        symbol_map.insert("eqdef", "eq.def");
        symbol_map.insert("triangleq", "eq.delta");
        symbol_map.insert("veeeq", "eq.equi");
        symbol_map.insert("wedgeq", "eq.est");
        symbol_map.insert("eqgtr", "eq.gt");
        symbol_map.insert("eqless", "eq.lt");
        symbol_map.insert("measeq", "eq.m");
        symbol_map.insert("ne", "eq.not");
        symbol_map.insert("curlyeqprec", "eq.prec");
        symbol_map.insert("questeq", "eq.quest");
        symbol_map.insert("curlyeqsucc", "eq.succ");
        symbol_map.insert("equiv", "eq.triple");
        symbol_map.insert("Equiv", "eq.quad");
        symbol_map.insert("greater", "gt");
        symbol_map.insert("ogreaterthan", "gt.circle");
        symbol_map.insert("gtrdot", "gt.dot");
        symbol_map.insert("gtrapprox", "gt.approx");
        symbol_map.insert("gg", "gt.double");
        symbol_map.insert("geq", "gt.eq");
        symbol_map.insert("geqslant", "gt.eq.slant");
        symbol_map.insert("gtreqless", "gt.eq.lt");
        symbol_map.insert("ngeq", "gt.eq.not");
        symbol_map.insert("geqq", "gt.equiv");
        symbol_map.insert("gtrless", "gt.lt");
        symbol_map.insert("ngtrless", "gt.lt.not");
        symbol_map.insert("gneq", "gt.neq");
        symbol_map.insert("gnapprox", "gt.napprox");
        symbol_map.insert("gneqq", "gt.nequiv");
        symbol_map.insert("ngtr", "gt.not");
        symbol_map.insert("gnsim", "gt.ntilde");
        symbol_map.insert("gtrsim", "gt.tilde");
        symbol_map.insert("ngtrsim", "gt.tilde.not");
        symbol_map.insert("vartriangleright", "gt.tri");
        symbol_map.insert("trianglerighteq", "gt.tri.eq");
        symbol_map.insert("ntrianglerighteq", "gt.tri.eq.not");
        symbol_map.insert("nvartriangleright", "gt.tri.not");
        symbol_map.insert("ggg", "gt.triple");
        symbol_map.insert("gggnest", "gt.triple.nested");
        symbol_map.insert("less", "lt");
        symbol_map.insert("olessthan", "lt.circle");
        symbol_map.insert("lessdot", "lt.dot");
        symbol_map.insert("lessapprox", "lt.approx");
        symbol_map.insert("ll", "lt.double");
        symbol_map.insert("leq", "lt.eq");
        symbol_map.insert("leqslant", "lt.eq.slant");
        symbol_map.insert("lesseqgtr", "lt.eq.gt");
        symbol_map.insert("nleq", "lt.eq.not");
        symbol_map.insert("leqq", "lt.equiv");
        symbol_map.insert("lessgtr", "lt.gt");
        symbol_map.insert("nlessgtr", "lt.gt.not");
        symbol_map.insert("lneq", "lt.neq");
        symbol_map.insert("lnapprox", "lt.napprox");
        symbol_map.insert("lneqq", "lt.nequiv");
        symbol_map.insert("nless", "lt.not");
        symbol_map.insert("lnsim", "lt.ntilde");
        symbol_map.insert("lesssim", "lt.tilde");
        symbol_map.insert("nlesssim", "lt.tilde.not");
        symbol_map.insert("vartriangleleft", "lt.tri");
        symbol_map.insert("trianglelefteq", "lt.tri.eq");
        symbol_map.insert("ntrianglelefteq", "lt.tri.eq.not");
        symbol_map.insert("nvartriangleleft", "lt.tri.not");
        symbol_map.insert("lll", "lt.triple");
        symbol_map.insert("lllnest", "lt.triple.nested");
        symbol_map.insert("approx", "approx");
        symbol_map.insert("approxeq", "approx.eq");
        symbol_map.insert("napprox", "approx.not");
        symbol_map.insert("prec", "prec");
        symbol_map.insert("precapprox", "prec.approx");
        symbol_map.insert("preccurlyeq", "prec.curly.eq");
        symbol_map.insert("npreccurlyeq", "prec.curly.eq.not");
        symbol_map.insert("Prec", "prec.double");
        symbol_map.insert("preceq", "prec.eq");
        symbol_map.insert("preceqq", "prec.equiv");
        symbol_map.insert("precnapprox", "prec.napprox");
        symbol_map.insert("precneq", "prec.neq");
        symbol_map.insert("precneqq", "prec.nequiv");
        symbol_map.insert("nprec", "prec.not");
        symbol_map.insert("precnsim", "prec.ntilde");
        symbol_map.insert("precsim", "prec.tilde");
        symbol_map.insert("succ", "succ");
        symbol_map.insert("succapprox", "succ.approx");
        symbol_map.insert("succcurlyeq", "succ.curly.eq");
        symbol_map.insert("nsucccurlyeq", "succ.curly.eq.not");
        symbol_map.insert("Succ", "succ.double");
        symbol_map.insert("succeq", "succ.eq");
        symbol_map.insert("succeqq", "succ.equiv");
        symbol_map.insert("succnapprox", "succ.napprox");
        symbol_map.insert("succneq", "succ.neq");
        symbol_map.insert("succneqq", "succ.nequiv");
        symbol_map.insert("nsucc", "succ.not");
        symbol_map.insert("succnsim", "succ.ntilde");
        symbol_map.insert("succsim", "succ.tilde");
        symbol_map.insert("nequiv", "equiv.not");
        symbol_map.insert("propto", "prop");
        symbol_map.insert("origof", "original");
        symbol_map.insert("imageof", "image");
        symbol_map.insert("varnothing", "emptyset");
        symbol_map.insert("emptysetoarr", "emptyset.arrow.r");
        symbol_map.insert("emptysetoarrl", "emptyset.arrow.l");
        symbol_map.insert("emptysetobar", "emptyset.bar");
        symbol_map.insert("emptysetocirc", "emptyset.circle");
        symbol_map.insert("revemptyset", "emptyset.rev");
        symbol_map.insert("setminus", "without");
        symbol_map.insert("complement", "complement");
        symbol_map.insert("in", "in");
        symbol_map.insert("notin", "in.not");
        symbol_map.insert("ni", "in.rev");
        symbol_map.insert("nni", "in.rev.not");
        symbol_map.insert("smallni", "in.rev.small");
        symbol_map.insert("smallin", "in.small");
        symbol_map.insert("subset", "subset");
        symbol_map.insert("subsetdot", "subset.dot");
        symbol_map.insert("Subset", "subset.double");
        symbol_map.insert("subseteq", "subset.eq");
        symbol_map.insert("nsubseteq", "subset.eq.not");
        symbol_map.insert("sqsubseteq", "subset.eq.sq");
        symbol_map.insert("nsqsubseteq", "subset.eq.sq.not");
        symbol_map.insert("subsetneq", "subset.neq");
        symbol_map.insert("nsubset", "subset.not");
        symbol_map.insert("sqsubset", "subset.sq");
        symbol_map.insert("sqsubsetneq", "subset.sq.neq");
        symbol_map.insert("supset", "supset");
        symbol_map.insert("supsetdot", "supset.dot");
        symbol_map.insert("Supset", "supset.double");
        symbol_map.insert("supseteq", "supset.eq");
        symbol_map.insert("nsupseteq", "supset.eq.not");
        symbol_map.insert("sqsupseteq", "supset.eq.sq");
        symbol_map.insert("nsqsupseteq", "supset.eq.sq.not");
        symbol_map.insert("supsetneq", "supset.neq");
        symbol_map.insert("nsupset", "supset.not");
        symbol_map.insert("sqsupset", "supset.sq");
        symbol_map.insert("sqsupsetneq", "supset.sq.neq");
        symbol_map.insert("cup", "union");
        symbol_map.insert("cupleftarrow", "union.arrow");
        symbol_map.insert("bigcup", "union.big");
        symbol_map.insert("cupdot", "union.dot");
        symbol_map.insert("bigcupdot", "union.dot.big");
        symbol_map.insert("Cup", "union.double");
        symbol_map.insert("uminus", "union.minus");
        symbol_map.insert("cupvee", "union.or");
        symbol_map.insert("uplus", "union.plus");
        symbol_map.insert("biguplus", "union.plus.big");
        symbol_map.insert("sqcup", "union.sq");
        symbol_map.insert("bigsqcup", "union.sq.big");
        symbol_map.insert("Sqcup", "union.sq.double");
        symbol_map.insert("cap", "sect");
        symbol_map.insert("capwedge", "sect.and");
        symbol_map.insert("bigcap", "sect.big");
        symbol_map.insert("capdot", "sect.dot");
        symbol_map.insert("Cap", "sect.double");
        symbol_map.insert("sqcap", "sect.sq");
        symbol_map.insert("bigsqcap", "sect.sq.big");
        symbol_map.insert("Sqcap", "sect.sq.double");
        symbol_map.insert("infty", "infinity");
        symbol_map.insert("nvinfty", "infinity.bar");
        symbol_map.insert("iinfin", "infinity.incomplete");
        symbol_map.insert("tieinfty", "infinity.tie");
        symbol_map.insert("partial", "diff");
        symbol_map.insert("nabla", "gradient");
        symbol_map.insert("sum", "sum");
        symbol_map.insert("sumint", "sum.integral");
        symbol_map.insert("prod", "product");
        symbol_map.insert("coprod", "product.co");
        symbol_map.insert("int", "integral");
        symbol_map.insert("intlarhk", "integral.arrow.hook");
        symbol_map.insert("awint", "integral.ccw");
        symbol_map.insert("oint", "integral.cont");
        symbol_map.insert("ointctrclockwise", "integral.cont.ccw");
        symbol_map.insert("varointclockwise", "integral.cont.cw");
        symbol_map.insert("intclockwise", "integral.cw");
        symbol_map.insert("intbar", "integral.dash");
        symbol_map.insert("intBar", "integral.dash.double");
        symbol_map.insert("iint", "integral.double");
        symbol_map.insert("iiiint", "integral.quad");
        symbol_map.insert("intcap", "integral.sect");
        symbol_map.insert("fint", "integral.slash");
        symbol_map.insert("sqint", "integral.square");
        symbol_map.insert("oiint", "integral.surf");
        symbol_map.insert("intx", "integral.times");
        symbol_map.insert("iiint", "integral.triple");
        symbol_map.insert("intcup", "integral.union");
        symbol_map.insert("oiiint", "integral.vol");
        symbol_map.insert("increment", "laplace");
        symbol_map.insert("forall", "forall");
        symbol_map.insert("exists", "exists");
        symbol_map.insert("nexists", "exists.not");
        symbol_map.insert("top", "top");
        symbol_map.insert("bot", "bot");
        symbol_map.insert("neg", "not");
        symbol_map.insert("wedge", "and");
        symbol_map.insert("bigwedge", "and.big");
        symbol_map.insert("curlywedge", "and.curly");
        symbol_map.insert("wedgedot", "and.dot");
        symbol_map.insert("Wedge", "and.double");
        symbol_map.insert("vee", "or");
        symbol_map.insert("bigvee", "or.big");
        symbol_map.insert("curlyvee", "or.curly");
        symbol_map.insert("veedot", "or.dot");
        symbol_map.insert("Vee", "or.double");
        symbol_map.insert("models", "models");
        symbol_map.insert("Vdash", "forces");
        symbol_map.insert("nVdash", "forces.not");
        symbol_map.insert("therefore", "therefore");
        symbol_map.insert("because", "because");
        symbol_map.insert("QED", "qed");
        symbol_map.insert("vysmwhtcircle", "compose");
        symbol_map.insert("multimap", "multimap");
        symbol_map.insert("dualmap", "multimap.double");
        symbol_map.insert("tplus", "tiny");
        symbol_map.insert("tminus", "miny");
        symbol_map.insert("mid", "divides");
        symbol_map.insert("nmid", "divides.not");
        symbol_map.insert("wr", "wreath");
        symbol_map.insert("parallel", "parallel");
        symbol_map.insert("nhpar", "parallel.struck");
        symbol_map.insert("circledparallel", "parallel.circle");
        symbol_map.insert("equalparallel", "parallel.eq");
        symbol_map.insert("equivVert", "parallel.equiv");
        symbol_map.insert("nparallel", "parallel.not");
        symbol_map.insert("eparsl", "parallel.slanted.eq");
        symbol_map.insert("smeparsl", "parallel.slanted.eq.tilde");
        symbol_map.insert("eqvparsl", "parallel.slanted.equiv");
        symbol_map.insert("parsim", "parallel.tilde");
        symbol_map.insert("perp", "perp");
        symbol_map.insert("operp", "perp.circle");
        symbol_map.insert("diameter", "diameter");
        symbol_map.insert("Join", "join");
        symbol_map.insert("rightouterjoin", "join.r");
        symbol_map.insert("leftouterjoin", "join.l");
        symbol_map.insert("fullouterjoin", "join.l.r");
        symbol_map.insert("smashtimes", "smash");
        symbol_map.insert("mathdollar", "dollar");
        symbol_map.insert("euro", "euro");
        symbol_map.insert("mathsterling", "pound");
        symbol_map.insert("mathyen", "yen");
        symbol_map.insert("checkmark", "checkmark");
        symbol_map.insert("maltese", "maltese");
        symbol_map.insert("clubsuit", "suit.club.filled");
        symbol_map.insert("varclubsuit", "suit.club.stroked");
        symbol_map.insert("vardiamondsuit", "suit.diamond.filled");
        symbol_map.insert("diamondsuit", "suit.diamond.stroked");
        symbol_map.insert("varheartsuit", "suit.heart.filled");
        symbol_map.insert("heartsuit", "suit.heart.stroked");
        symbol_map.insert("spadesuit", "suit.spade.filled");
        symbol_map.insert("varspadesuit", "suit.spade.stroked");
        symbol_map.insert("quarternote", "note.quarter.alt");
        symbol_map.insert("eighthnote", "note.eighth.alt");
        symbol_map.insert("twonotes", "note.eighth.beamed");
        symbol_map.insert("natural", "natural");
        symbol_map.insert("flat", "flat");
        symbol_map.insert("sharp", "sharp");
        symbol_map.insert("smblkcircle", "bullet");
        symbol_map.insert("mdlgwhtcircle", "circle.stroked");
        symbol_map.insert("mdsmwhtcircle", "circle.stroked.small");
        symbol_map.insert("lgwhtcircle", "circle.stroked.big");
        symbol_map.insert("mdlgblkcircle", "circle.filled");
        symbol_map.insert("mdsmblkcircle", "circle.filled.tiny");
        symbol_map.insert("vysmblkcircle", "circle.filled.small");
        symbol_map.insert("lgblkcircle", "circle.filled.big");
        symbol_map.insert("dottedcircle", "circle.dotted");
        symbol_map.insert("circledcirc", "circle.nested");
        symbol_map.insert("whthorzoval", "ellipse.stroked.h");
        symbol_map.insert("whtvertoval", "ellipse.stroked.v");
        symbol_map.insert("blkhorzoval", "ellipse.filled.h");
        symbol_map.insert("blkvertoval", "ellipse.filled.v");
        symbol_map.insert("bigtriangleup", "triangle.stroked.t");
        symbol_map.insert("bigtriangledown", "triangle.stroked.b");
        symbol_map.insert("triangleright", "triangle.stroked.r");
        symbol_map.insert("triangleleft", "triangle.stroked.l");
        symbol_map.insert("lltriangle", "triangle.stroked.bl");
        symbol_map.insert("lrtriangle", "triangle.stroked.br");
        symbol_map.insert("ultriangle", "triangle.stroked.tl");
        symbol_map.insert("urtriangle", "triangle.stroked.tr");
        symbol_map.insert("vartriangle", "triangle.stroked.small.t");
        symbol_map.insert("triangledown", "triangle.stroked.small.b");
        symbol_map.insert("smalltriangleright", "triangle.stroked.small.r");
        symbol_map.insert("smalltriangleleft", "triangle.stroked.small.l");
        symbol_map.insert("whiteinwhitetriangle", "triangle.stroked.nested");
        symbol_map.insert("trianglecdot", "triangle.stroked.dot");
        symbol_map.insert("bigblacktriangleup", "triangle.filled.t");
        symbol_map.insert("bigblacktriangledown", "triangle.filled.b");
        symbol_map.insert("blacktriangleright", "triangle.filled.r");
        symbol_map.insert("blacktriangleleft", "triangle.filled.l");
        symbol_map.insert("llblacktriangle", "triangle.filled.bl");
        symbol_map.insert("lrblacktriangle", "triangle.filled.br");
        symbol_map.insert("ulblacktriangle", "triangle.filled.tl");
        symbol_map.insert("urblacktriangle", "triangle.filled.tr");
        symbol_map.insert("blacktriangle", "triangle.filled.small.t");
        symbol_map.insert("blacktriangledown", "triangle.filled.small.b");
        symbol_map.insert("smallblacktriangleright", "triangle.filled.small.r");
        symbol_map.insert("smallblacktriangleleft", "triangle.filled.small.l");
        symbol_map.insert("mdlgwhtsquare", "square.stroked");
        symbol_map.insert("smwhtsquare", "square.stroked.tiny");
        symbol_map.insert("mdsmwhtsquare", "square.stroked.small");
        symbol_map.insert("mdwhtsquare", "square.stroked.medium");
        symbol_map.insert("lgwhtsquare", "square.stroked.big");
        symbol_map.insert("dottedsquare", "square.stroked.dotted");
        symbol_map.insert("squoval", "square.stroked.rounded");
        symbol_map.insert("mdlgblksquare", "square.filled");
        symbol_map.insert("smblksquare", "square.filled.tiny");
        symbol_map.insert("mdsmblksquare", "square.filled.small");
        symbol_map.insert("mdblksquare", "square.filled.medium");
        symbol_map.insert("lgblksquare", "square.filled.big");
        symbol_map.insert("hrectangle", "rect.stroked.h");
        symbol_map.insert("vrectangle", "rect.stroked.v");
        symbol_map.insert("hrectangleblack", "rect.filled.h");
        symbol_map.insert("vrectangleblack", "rect.filled.v");
        symbol_map.insert("pentagon", "penta.stroked");
        symbol_map.insert("pentagonblack", "penta.filled");
        symbol_map.insert("varhexagon", "hexa.stroked");
        symbol_map.insert("varhexagonblack", "hexa.filled");
        symbol_map.insert("mdlgwhtdiamond", "diamond.stroked");
        symbol_map.insert("smwhtdiamond", "diamond.stroked.small");
        symbol_map.insert("mdwhtdiamond", "diamond.stroked.medium");
        symbol_map.insert("diamondcdot", "diamond.stroked.dot");
        symbol_map.insert("mdlgblkdiamond", "diamond.filled");
        symbol_map.insert("mdblkdiamond", "diamond.filled.medium");
        symbol_map.insert("smblkdiamond", "diamond.filled.small");
        symbol_map.insert("mdlgwhtlozenge", "lozenge.stroked");
        symbol_map.insert("smwhtlozenge", "lozenge.stroked.small");
        symbol_map.insert("mdwhtlozenge", "lozenge.stroked.medium");
        symbol_map.insert("mdlgblklozenge", "lozenge.filled");
        symbol_map.insert("smblklozenge", "lozenge.filled.small");
        symbol_map.insert("mdblklozenge", "lozenge.filled.medium");
        symbol_map.insert("parallelogram", "parallelogram.stroked");
        symbol_map.insert("parallelogramblack", "parallelogram.filled");
        symbol_map.insert("star", "star.op");
        symbol_map.insert("bigwhitestar", "star.stroked");
        symbol_map.insert("bigstar", "star.filled");
        symbol_map.insert("rightarrow", "arrow.r");
        symbol_map.insert("longmapsto", "arrow.r.long.bar");
        symbol_map.insert("mapsto", "arrow.r.bar");
        symbol_map.insert("rightdowncurvedarrow", "arrow.r.curve");
        symbol_map.insert("rightdasharrow", "arrow.r.dashed");
        symbol_map.insert("rightdotarrow", "arrow.r.dotted");
        symbol_map.insert("Rightarrow", "arrow.r.double");
        symbol_map.insert("Mapsto", "arrow.r.double.bar");
        symbol_map.insert("Longrightarrow", "arrow.r.double.long");
        symbol_map.insert("Longmapsto", "arrow.r.double.long.bar");
        symbol_map.insert("nRightarrow", "arrow.r.double.not");
        symbol_map.insert("hookrightarrow", "arrow.r.hook");
        symbol_map.insert("longrightarrow", "arrow.r.long");
        symbol_map.insert("longrightsquigarrow", "arrow.r.long.squiggly");
        symbol_map.insert("looparrowright", "arrow.r.loop");
        symbol_map.insert("nrightarrow", "arrow.r.not");
        symbol_map.insert("RRightarrow", "arrow.r.quad");
        symbol_map.insert("rightsquigarrow", "arrow.r.squiggly");
        symbol_map.insert("rightarrowbar", "arrow.r.stop");
        symbol_map.insert("rightwhitearrow", "arrow.r.stroked");
        symbol_map.insert("rightarrowtail", "arrow.r.tail");
        symbol_map.insert("similarrightarrow", "arrow.r.tilde");
        symbol_map.insert("Rrightarrow", "arrow.r.triple");
        symbol_map.insert("twoheadmapsto", "arrow.r.twohead.bar");
        symbol_map.insert("twoheadrightarrow", "arrow.r.twohead");
        symbol_map.insert("rightwavearrow", "arrow.r.wave");
        symbol_map.insert("leftarrow", "arrow.l");
        symbol_map.insert("mapsfrom", "arrow.l.bar");
        symbol_map.insert("leftdowncurvedarrow", "arrow.l.curve");
        symbol_map.insert("leftdasharrow", "arrow.l.dashed");
        symbol_map.insert("leftdotarrow", "arrow.l.dotted");
        symbol_map.insert("Leftarrow", "arrow.l.double");
        symbol_map.insert("Mapsfrom", "arrow.l.double.bar");
        symbol_map.insert("Longleftarrow", "arrow.l.double.long");
        symbol_map.insert("Longmapsfrom", "arrow.l.double.long.bar");
        symbol_map.insert("nLeftarrow", "arrow.l.double.not");
        symbol_map.insert("hookleftarrow", "arrow.l.hook");
        symbol_map.insert("longleftarrow", "arrow.l.long");
        symbol_map.insert("longmapsfrom", "arrow.l.long.bar");
        symbol_map.insert("longleftsquigarrow", "arrow.l.long.squiggly");
        symbol_map.insert("looparrowleft", "arrow.l.loop");
        symbol_map.insert("nleftarrow", "arrow.l.not");
        symbol_map.insert("LLeftarrow", "arrow.l.quad");
        symbol_map.insert("leftsquigarrow", "arrow.l.squiggly");
        symbol_map.insert("barleftarrow", "arrow.l.stop");
        symbol_map.insert("leftwhitearrow", "arrow.l.stroked");
        symbol_map.insert("leftarrowtail", "arrow.l.tail");
        symbol_map.insert("similarleftarrow", "arrow.l.tilde");
        symbol_map.insert("Lleftarrow", "arrow.l.triple");
        symbol_map.insert("twoheadmapsfrom", "arrow.l.twohead.bar");
        symbol_map.insert("twoheadleftarrow", "arrow.l.twohead");
        symbol_map.insert("leftwavearrow", "arrow.l.wave");
        symbol_map.insert("uparrow", "arrow.t");
        symbol_map.insert("mapsup", "arrow.t.bar");
        symbol_map.insert("uprightcurvearrow", "arrow.t.curve");
        symbol_map.insert("updasharrow", "arrow.t.dashed");
        symbol_map.insert("Uparrow", "arrow.t.double");
        symbol_map.insert("UUparrow", "arrow.t.quad");
        symbol_map.insert("baruparrow", "arrow.t.stop");
        symbol_map.insert("upwhitearrow", "arrow.t.stroked");
        symbol_map.insert("Uuparrow", "arrow.t.triple");
        symbol_map.insert("twoheaduparrow", "arrow.t.twohead");
        symbol_map.insert("downarrow", "arrow.b");
        symbol_map.insert("mapsdown", "arrow.b.bar");
        symbol_map.insert("downrightcurvedarrow", "arrow.b.curve");
        symbol_map.insert("downdasharrow", "arrow.b.dashed");
        symbol_map.insert("Downarrow", "arrow.b.double");
        symbol_map.insert("DDownarrow", "arrow.b.quad");
        symbol_map.insert("downarrowbar", "arrow.b.stop");
        symbol_map.insert("downwhitearrow", "arrow.b.stroked");
        symbol_map.insert("Ddownarrow", "arrow.b.triple");
        symbol_map.insert("twoheaddownarrow", "arrow.b.twohead");
        symbol_map.insert("leftrightarrow", "arrow.l.r");
        symbol_map.insert("Leftrightarrow", "arrow.l.r.double");
        symbol_map.insert("Longleftrightarrow", "arrow.l.r.double.long");
        symbol_map.insert("nLeftrightarrow", "arrow.l.r.double.not");
        symbol_map.insert("longleftrightarrow", "arrow.l.r.long");
        symbol_map.insert("nleftrightarrow", "arrow.l.r.not");
        symbol_map.insert("leftrightsquigarrow", "arrow.l.r.wave");
        symbol_map.insert("updownarrow", "arrow.t.b");
        symbol_map.insert("Updownarrow", "arrow.t.b.double");
        symbol_map.insert("nearrow", "arrow.tr");
        symbol_map.insert("Nearrow", "arrow.tr.double");
        symbol_map.insert("hknearrow", "arrow.tr.hook");
        symbol_map.insert("searrow", "arrow.br");
        symbol_map.insert("Searrow", "arrow.br.double");
        symbol_map.insert("hksearrow", "arrow.br.hook");
        symbol_map.insert("nwarrow", "arrow.tl");
        symbol_map.insert("Nwarrow", "arrow.tl.double");
        symbol_map.insert("hknwarrow", "arrow.tl.hook");
        symbol_map.insert("swarrow", "arrow.bl");
        symbol_map.insert("Swarrow", "arrow.bl.double");
        symbol_map.insert("hkswarrow", "arrow.bl.hook");
        symbol_map.insert("nwsearrow", "arrow.tl.br");
        symbol_map.insert("neswarrow", "arrow.tr.bl");
        symbol_map.insert("acwopencirclearrow", "arrow.ccw");
        symbol_map.insert("curvearrowleft", "arrow.ccw.half");
        symbol_map.insert("cwopencirclearrow", "arrow.cw");
        symbol_map.insert("curvearrowright", "arrow.cw.half");
        symbol_map.insert("downzigzagarrow", "arrow.zigzag");
        symbol_map.insert("rightrightarrows", "arrows.rr");
        symbol_map.insert("leftleftarrows", "arrows.ll");
        symbol_map.insert("upuparrows", "arrows.tt");
        symbol_map.insert("downdownarrows", "arrows.bb");
        symbol_map.insert("leftrightarrows", "arrows.lr");
        symbol_map.insert("barleftarrowrightarrowbar", "arrows.lr.stop");
        symbol_map.insert("rightleftarrows", "arrows.rl");
        symbol_map.insert("updownarrows", "arrows.tb");
        symbol_map.insert("downuparrows", "arrows.bt");
        symbol_map.insert("rightthreearrows", "arrows.rrr");
        symbol_map.insert("leftthreearrows", "arrows.lll");
        symbol_map.insert("rightharpoonup", "harpoon.rt");
        symbol_map.insert("barrightharpoonup", "harpoon.rt.bar");
        symbol_map.insert("rightharpoonupbar", "harpoon.rt.stop");
        symbol_map.insert("rightharpoondown", "harpoon.rb");
        symbol_map.insert("barrightharpoondown", "harpoon.rb.bar");
        symbol_map.insert("rightharpoondownbar", "harpoon.rb.stop");
        symbol_map.insert("leftharpoonup", "harpoon.lt");
        symbol_map.insert("leftharpoonupbar", "harpoon.lt.bar");
        symbol_map.insert("barleftharpoonup", "harpoon.lt.stop");
        symbol_map.insert("leftharpoondown", "harpoon.lb");
        symbol_map.insert("leftharpoondownbar", "harpoon.lb.bar");
        symbol_map.insert("barleftharpoondown", "harpoon.lb.stop");
        symbol_map.insert("upharpoonleft", "harpoon.tl");
        symbol_map.insert("upharpoonleftbar", "harpoon.tl.bar");
        symbol_map.insert("barupharpoonleft", "harpoon.tl.stop");
        symbol_map.insert("upharpoonright", "harpoon.tr");
        symbol_map.insert("upharpoonrightbar", "harpoon.tr.bar");
        symbol_map.insert("barupharpoonright", "harpoon.tr.stop");
        symbol_map.insert("downharpoonleft", "harpoon.bl");
        symbol_map.insert("bardownharpoonleft", "harpoon.bl.bar");
        symbol_map.insert("downharpoonleftbar", "harpoon.bl.stop");
        symbol_map.insert("downharpoonright", "harpoon.br");
        symbol_map.insert("bardownharpoonright", "harpoon.br.bar");
        symbol_map.insert("downharpoonrightbar", "harpoon.br.stop");
        symbol_map.insert("leftrightharpoonupup", "harpoon.lt.rt");
        symbol_map.insert("leftrightharpoondowndown", "harpoon.lb.rb");
        symbol_map.insert("leftrightharpoondownup", "harpoon.lb.rt");
        symbol_map.insert("leftrightharpoonupdown", "harpoon.lt.rb");
        symbol_map.insert("updownharpoonleftleft", "harpoon.tl.bl");
        symbol_map.insert("updownharpoonrightright", "harpoon.tr.br");
        symbol_map.insert("updownharpoonleftright", "harpoon.tl.br");
        symbol_map.insert("updownharpoonrightleft", "harpoon.tr.bl");
        symbol_map.insert("rightharpoonsupdown", "harpoons.rtrb");
        symbol_map.insert("downharpoonsleftright", "harpoons.blbr");
        symbol_map.insert("downupharpoonsleftright", "harpoons.bltr");
        symbol_map.insert("leftrightharpoonsdown", "harpoons.lbrb");
        symbol_map.insert("leftharpoonsupdown", "harpoons.ltlb");
        symbol_map.insert("leftrightharpoons", "harpoons.ltrb");
        symbol_map.insert("leftrightharpoonsup", "harpoons.ltrt");
        symbol_map.insert("rightleftharpoonsdown", "harpoons.rblb");
        symbol_map.insert("rightleftharpoons", "harpoons.rtlb");
        symbol_map.insert("rightleftharpoonsup", "harpoons.rtlt");
        symbol_map.insert("updownharpoonsleftright", "harpoons.tlbr");
        symbol_map.insert("upharpoonsleftright", "harpoons.tltr");
        symbol_map.insert("vdash", "tack.r");
        symbol_map.insert("nvdash", "tack.r.not");
        symbol_map.insert("vlongdash", "tack.r.long");
        symbol_map.insert("assert", "tack.r.short");
        symbol_map.insert("vDash", "tack.r.double");
        symbol_map.insert("nvDash", "tack.r.double.not");
        symbol_map.insert("dashv", "tack.l");
        symbol_map.insert("longdashv", "tack.l.long");
        symbol_map.insert("shortlefttack", "tack.l.short");
        symbol_map.insert("Dashv", "tack.l.double");
        symbol_map.insert("bigbot", "tack.t.big");
        symbol_map.insert("Vbar", "tack.t.double");
        symbol_map.insert("shortuptack", "tack.t.short");
        symbol_map.insert("bigtop", "tack.b.big");
        symbol_map.insert("barV", "tack.b.double");
        symbol_map.insert("shortdowntack", "tack.b.short");
        symbol_map.insert("dashVdash", "tack.l.r");
        /*
        symbol_map.insert("mupalpha", "alpha");
        symbol_map.insert("mupbeta", "beta");
        symbol_map.insert("mupchi", "chi");
        symbol_map.insert("mupdelta", "delta");
        symbol_map.insert("mupvarepsilon", "epsilon");
        symbol_map.insert("mupepsilon", "epsilon.alt");
        symbol_map.insert("mupeta", "eta");
        symbol_map.insert("mupgamma", "gamma");
        symbol_map.insert("mupiota", "iota");
        symbol_map.insert("mupkappa", "kappa");
        symbol_map.insert("mupvarkappa", "kappa.alt");
        symbol_map.insert("muplambda", "lambda");
        symbol_map.insert("mupmu", "mu");
        symbol_map.insert("mupnu", "nu");
        symbol_map.insert("mho", "ohm.inv");
        symbol_map.insert("mupomega", "omega");
        symbol_map.insert("mupomicron", "omicron");
        symbol_map.insert("mupvarphi", "phi");
        symbol_map.insert("mupphi", "phi.alt");
        symbol_map.insert("muppi", "pi");
        symbol_map.insert("mupvarpi", "pi.alt");
        symbol_map.insert("muppsi", "psi");
        symbol_map.insert("muprho", "rho");
        symbol_map.insert("mupvarrho", "rho.alt");
        symbol_map.insert("mupsigma", "sigma");
        symbol_map.insert("mupvarsigma", "sigma.alt");
        symbol_map.insert("muptau", "tau");
        symbol_map.insert("muptheta", "theta");
        symbol_map.insert("mupvartheta", "theta.alt");
        symbol_map.insert("mupupsilon", "upsilon");
        symbol_map.insert("mupxi", "xi");
        symbol_map.insert("mupzeta", "zeta");
        symbol_map.insert("mupAlpha", "Alpha");
        symbol_map.insert("mupBeta", "Beta");
        symbol_map.insert("mupChi", "Chi");
        symbol_map.insert("mupDelta", "Delta");
        symbol_map.insert("mupEpsilon", "Epsilon");
        symbol_map.insert("mupEta", "Eta");
        symbol_map.insert("mupGamma", "Gamma");
        symbol_map.insert("mupIota", "Iota");
        symbol_map.insert("mupKappa", "Kappa");
        symbol_map.insert("mupLambda", "Lambda");
        symbol_map.insert("mupMu", "Mu");
        symbol_map.insert("mupNu", "Nu");
        symbol_map.insert("mupOmega", "Omega");
        symbol_map.insert("mupOmicron", "Omicron");
        symbol_map.insert("mupPhi", "Phi");
        symbol_map.insert("mupPi", "Pi");
        symbol_map.insert("mupPsi", "Psi");
        symbol_map.insert("mupRho", "Rho");
        symbol_map.insert("mupSigma", "Sigma");
        symbol_map.insert("mupTau", "Tau");
        symbol_map.insert("mupTheta", "Theta");
        symbol_map.insert("mupUpsilon", "Upsilon");
        symbol_map.insert("mupXi", "Xi");
        symbol_map.insert("mupZeta", "Zeta");
        */
        symbol_map.insert("BbbA", "AA");
        symbol_map.insert("BbbB", "BB");
        symbol_map.insert("BbbC", "CC");
        symbol_map.insert("BbbD", "DD");
        symbol_map.insert("BbbE", "EE");
        symbol_map.insert("BbbF", "FF");
        symbol_map.insert("BbbG", "GG");
        symbol_map.insert("BbbH", "HH");
        symbol_map.insert("BbbI", "II");
        symbol_map.insert("BbbJ", "JJ");
        symbol_map.insert("BbbK", "KK");
        symbol_map.insert("BbbL", "LL");
        symbol_map.insert("BbbM", "MM");
        symbol_map.insert("BbbN", "NN");
        symbol_map.insert("BbbO", "OO");
        symbol_map.insert("BbbP", "PP");
        symbol_map.insert("BbbQ", "QQ");
        symbol_map.insert("BbbR", "RR");
        symbol_map.insert("BbbS", "SS");
        symbol_map.insert("BbbT", "TT");
        symbol_map.insert("BbbU", "UU");
        symbol_map.insert("BbbV", "VV");
        symbol_map.insert("BbbW", "WW");
        symbol_map.insert("BbbX", "XX");
        symbol_map.insert("BbbY", "YY");
        symbol_map.insert("BbbZ", "ZZ");
        symbol_map.insert("ell", "ell");
        symbol_map.insert("Planckconst", "planck");
        symbol_map.insert("hslash", "planck.reduce");
        symbol_map.insert("Angstrom", "angstrom");
        symbol_map.insert("Re", "Re");
        symbol_map.insert("Im", "Im");
        symbol_map.insert("imath", "dotless.i");
        symbol_map.insert("jmath", "dotless.j");

        // force override
        symbol_map.insert("top", "top");
        symbol_map.insert("frac", "frac");
        symbol_map.insert("tilde", "tilde");
        symbol_map.insert("hat", "hat");
        symbol_map.insert("upright", "mathrm");
        symbol_map.insert("bold", "boldsymbol");

        symbol_map.insert("hyph.minus", "\\text{-}");

        symbol_map
    })
}